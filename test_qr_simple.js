// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –§–ù–° –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  // QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ù–°
  qrCode: 't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345&fp=1234567890&n=1',
  
  // –ü–æ–¥–¥–æ–º–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  subdomains: [
    '—Ä-—Ñ–∞—Ä–º.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'apteka-36-6.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'invalid-subdomain.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
  ],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ QR-–∫–æ–¥–∞
function testQrParsing() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞...\n');

  const qrParser = {
    parseQrCode: (qrCode) => {
      const params = new URLSearchParams(qrCode);
      
      const fn = params.get('fn');
      const i = params.get('i');
      const fp = params.get('fp');
      const s = params.get('s');
      const t = params.get('t');
      const n = params.get('n');

      if (!fn || !i || !fp || !s || !t) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.');
      }

      const parseFnsDate = (dateStr) => {
        const year = dateStr.substring(0, 4);
        const month = dateStr.substring(4, 6);
        const day = dateStr.substring(6, 8);
        const hour = dateStr.substring(9, 11);
        const minute = dateStr.substring(11, 13);
        
        return `${year}-${month}-${day}T${hour}:${minute}:00`;
      };

      return {
        fn,
        fd: i,
        fp,
        sum: s,
        date: parseFnsDate(t),
        typeOperation: n || '1',
      };
    },

    validateQrCode: (qrCode) => {
      try {
        const params = new URLSearchParams(qrCode);
        const requiredParams = ['fn', 'i', 'fp', 's', 't'];
        
        return requiredParams.every(param => params.has(param));
      } catch {
        return false;
      }
    },
  };

  // –¢–µ—Å—Ç–æ–≤—ã–µ QR-–∫–æ–¥—ã
  const testQrCodes = [
    't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345&fp=1234567890&n=1',
    't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345&fp=1234567890',
    'invalid-qr-code',
    't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345',
  ];

  for (const qrCode of testQrCodes) {
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º QR-–∫–æ–¥: ${qrCode}`);
    
    try {
      const isValid = qrParser.validateQrCode(qrCode);
      console.log(`–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isValid ? '‚úÖ' : '‚ùå'}`);
      
      if (isValid) {
        const parsed = qrParser.parseQrCode(qrCode);
        console.log('–ü–∞—Ä—Å–∏–Ω–≥:');
        console.log(JSON.stringify(parsed, null, 2));
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
    }
    
    console.log('---\n');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–¥–æ–º–µ–Ω–∞
function testSubdomainExtraction() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤...\n');

  const extractSubdomain = (host) => {
    if (!host) return null;

    const hostWithoutPort = host.split(':')[0];
    const parts = hostWithoutPort.split('.');
    
    if (parts.length >= 3) {
      return parts[0];
    }
    
    return null;
  };

  const testHosts = [
    '—Ä-—Ñ–∞—Ä–º.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'apteka-36-6.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'test.localhost:4000',
    'localhost:4000',
    'invalid-host',
    null,
  ];

  for (const host of testHosts) {
    const subdomain = extractSubdomain(host);
    console.log(`–•–æ—Å—Ç: ${host || 'null'}`);
    console.log(`–ü–æ–¥–¥–æ–º–µ–Ω: ${subdomain || 'null'}`);
    console.log('---\n');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–µ—à–±–µ–∫–∞
function testCashbackCalculation() {
  console.log('üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–µ—à–±–µ–∫–∞...\n');

  const mockReceiptData = {
    items: [
      {
        name: '–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª 500–º–≥',
        sku: 'PAR-500-001',
        price: 150,
        quantity: 2,
        total: 300,
      },
      {
        name: '–ê—Å–ø–∏—Ä–∏–Ω 100–º–≥',
        sku: 'ASP-100-001',
        price: 200,
        quantity: 1,
        total: 200,
      },
    ],
  };

  const mockOffers = [
    {
      id: 1,
      profit: 10,
      profitType: 'PERCENT',
      products: [
        { product: { name: '–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª', sku: 'PAR-500-001' } }
      ],
    },
    {
      id: 2,
      profit: 50,
      profitType: 'AMOUNT',
      products: [
        { product: { name: '–ê—Å–ø–∏—Ä–∏–Ω', sku: 'ASP-100-001' } }
      ],
    },
  ];

  const calculateCashback = (receiptItems, offers) => {
    let totalCashback = 0;

    for (const item of receiptItems) {
      const matchingOffer = offers.find(offer => 
        offer.products.some(productOffer => 
          productOffer.product.sku === item.sku ||
          item.name.toLowerCase().includes(productOffer.product.name.toLowerCase())
        )
      );

      if (matchingOffer) {
        if (matchingOffer.profitType === 'PERCENT') {
          totalCashback += Math.round(item.total * (matchingOffer.profit / 100));
        } else {
          totalCashback += matchingOffer.profit;
        }
      }
    }

    return totalCashback;
  };

  const cashback = calculateCashback(mockReceiptData.items, mockOffers);
  console.log('–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:');
  console.log(JSON.stringify(mockReceiptData, null, 2));
  console.log('\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:');
  console.log(JSON.stringify(mockOffers, null, 2));
  console.log(`\nüí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∫–µ—à–±–µ–∫: ${cashback} —Ä—É–±–ª–µ–π`);
  console.log('---\n');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –§–ù–°\n');
  
  // –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ QR-–∫–æ–¥–∞
  testQrParsing();
  
  // –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–¥–æ–º–µ–Ω–∞
  testSubdomainExtraction();
  
  // –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–µ—à–±–µ–∫–∞
  testCashbackCalculation();
  
  console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é SQL-—Å–∫—Ä–∏–ø—Ç–æ–≤');
  console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run start:dev');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();
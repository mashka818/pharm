generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      AdminRole

  // Связь с отменёнными кэшбеками
  cancelledCashbacks Cashback[]

  @@map("admins")
}

enum AdminRole {
  ADMIN
}

model Promotion {
  promotionId String       @unique
  name        String
  logo        String
  banner      String?
  favicon     String
  color       String
  description String
  domain      String       @unique
  inn         String?
  ogrn        String?
  appId       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  customers   Customer[]
  companies   Company[]
  brands      Brand[]
  products    Product[]
  offers      Offer[]
  fnsRequests FnsRequest[]
  receipts    Receipt[]
  cashbacks   Cashback[]    // Новая связь

  @@map("promotions")
}

model Brand {
  id          Int       @id @default(autoincrement())
  promotion   Promotion @relation(fields: [promotionId], references: [promotionId])
  promotionId String
  description String
  name        String
  logo        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("brands")
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  sku             String
  fixCashback     Int?
  cashbackType    CashbackType?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  promotion       Promotion        @relation(fields: [promotionId], references: [promotionId])
  brand           Brand            @relation(fields: [brandId], references: [id])
  brandId         Int
  offers          ProductOffer[]
  promotionId     String
  receiptProducts ReceiptProduct[]
  cashbackItems   CashbackItem[]   // Новая связь

  @@map("products")
}

enum CashbackType {
  percent
  amount
}

model ProductOffer {
  productId Int
  offerId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  offer     Offer   @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@id([productId, offerId])
  @@map("product_offers")
}

model Offer {
  id              Int              @id @default(autoincrement())
  profit          Int
  profitType      ProfitType
  banner_image    String
  banner_color    String
  date_from       DateTime
  date_to         DateTime
  products        ProductOffer[]
  condition       OfferCondition?  @relation(fields: [conditionId], references: [id])
  conditionId     Int?             @unique()
  promotion       Promotion        @relation(fields: [promotionId], references: [promotionId])
  promotionId     String
  receiptProducts ReceiptProduct[]
  cashbackItems   CashbackItem[]   // Новая связь

  @@map("offers")
}

model OfferCondition {
  id         Int                   @id @default(autoincrement())
  variant    OfferConditionVariant
  type       OfferConditionType
  from_value Int?
  to_value   Int?
  Offer      Offer?
}

enum OfferConditionVariant {
  amount
  price
}

enum OfferConditionType {
  from
  to
  from_to
}

enum ProfitType {
  static
  from
}

model Company {
  id          Int         @id @default(autoincrement())
  username    String      @unique
  password    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  promotion   Promotion   @relation(fields: [promotionId], references: [promotionId])
  promotionId String
  role        CompanyRole

  @@map("companies")
}

enum CompanyRole {
  COMPANY
}

model UnconfirmedCustomer {
  id                Int          @id @default(autoincrement())
  name              String
  surname           String
  patronymic        String?
  email             String
  createdAt         DateTime     @default(now())
  confirmationToken String       @unique
  promotionId       String
  password          String
  address           String
  role              CustomerRole

  @@map("unconfirmed_customers")
}

model Customer {
  id                    Int                 @id @default(autoincrement())
  name                  String
  surname               String
  patronymic            String?
  email                 String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  promotionId           String
  password              String
  address               String
  bonuses               Int                 @default(0)
  mainWithdrawalVariant Int?
  withdrawalVariants    WithdrawalVariant[]
  promotion             Promotion           @relation(fields: [promotionId], references: [promotionId])
  role                  CustomerRole
  fnsRequests           FnsRequest[]
  receipts              Receipt[]
  cashbacks             Cashback[]          // Новая связь

  @@unique([email, promotionId])
  @@map("customers")
}

model UnconfirmedEmail {
  email             String
  confirmationToken String   @unique
  createdAt         DateTime @default(now())
}

enum CustomerRole {
  CUSTOMER
}

model WithdrawalVariant {
  id         Int            @id @default(autoincrement())
  type       WithdrawalType
  iconType   String
  title      String         @unique
  customer   Customer       @relation(fields: [customerId], references: [id])
  customerId Int
  Withdrowal Withdrawal[]

  @@map("withdrawal_variants")
}

enum WithdrawalType {
  bank
  phone
}

model Withdrawal {
  id                  Int               @id @default(autoincrement())
  withdrawalVariant   WithdrawalVariant @relation(fields: [withdrawalVariantId], references: [id])
  withdrawalVariantId Int
  date                DateTime
  amount              Int
  status              WithdrowalStaus

  @@map("withdrawals")
}

enum WithdrowalStaus {
  pending
  success
  rejected
}

model Receipt {
  id                  Int                   @id @default(autoincrement())
  date                DateTime
  number              Int
  price               Int
  cashback            Int
  products            ReceiptProduct[]
  status              ReceiptStaus
  address             String
  promotionId         String
  promotion           Promotion             @relation(fields: [promotionId], references: [promotionId])
  customerId          Int?
  customer            Customer?             @relation(fields: [customerId], references: [id])
  fnsRequests         FnsRequest[]
  cashbacks           Cashback[]            // Новая связь

  @@map("receipts")
}

enum ReceiptStaus {
  pending
  processing
  success
  rejected
  failed
}

model ReceiptProduct {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  offer     Offer?  @relation(fields: [offerId], references: [id])
  offerId   Int?
  cashback  Int
  Receipt   Receipt @relation(fields: [receiptId], references: [id])
  receiptId Int

  @@map("receipt_products")
}

model FnsRequest {
  id              String        @id @default(uuid())
  customerId      Int?
  customer        Customer?     @relation(fields: [customerId], references: [id])
  receiptId       Int?
  receipt         Receipt?      @relation(fields: [receiptId], references: [id])
  promotionId     String
  promotion       Promotion     @relation(fields: [promotionId], references: [promotionId])
  
  qrData          Json
  
  messageId       String?
  
  status          ReceiptStaus  @default(pending)
  
  fnsResponse     Json?
  isValid         Boolean?
  isReturn        Boolean?
  isFake          Boolean?
  
  cashbackAmount  Int?
  cashbackAwarded Boolean       @default(false)
  
  attempts        Int           @default(0)
  lastAttemptAt   DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  cashbacks       Cashback[]    // Новая связь
  
  @@map("fns_requests")
}

model FnsToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@map("fns_tokens")
}

model FnsDailyLimit {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  count     Int      @default(0)
  
  @@map("fns_daily_limits")
}

// Новая модель для истории кэшбека
model Cashback {
  id            Int              @id @default(autoincrement())
  customerId    Int
  customer      Customer         @relation(fields: [customerId], references: [id])
  receiptId     Int?
  receipt       Receipt?         @relation(fields: [receiptId], references: [id])
  fnsRequestId  String?
  fnsRequest    FnsRequest?      @relation(fields: [fnsRequestId], references: [id])
  promotionId   String
  promotion     Promotion        @relation(fields: [promotionId], references: [promotionId])
  
  amount        Int              // Общая сумма кэшбека
  status        CashbackStatus   @default(active)
  reason        String?          // Причина отмены, если status = cancelled
  
  // Админ, который отменил кэшбек
  cancelledBy   Int?
  cancelledByAdmin Admin?        @relation(fields: [cancelledBy], references: [id])
  cancelledAt   DateTime?
  
  // Детализация кэшбека по товарам/акциям
  items         CashbackItem[]
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("cashbacks")
}

// Детализация кэшбека по товарам
model CashbackItem {
  id            Int       @id @default(autoincrement())
  cashbackId    Int
  cashback      Cashback  @relation(fields: [cashbackId], references: [id], onDelete: Cascade)
  
  productId     Int?
  product       Product?  @relation(fields: [productId], references: [id])
  offerId       Int?
  offer         Offer?    @relation(fields: [offerId], references: [id])
  
  // Данные о товаре из чека
  productName   String
  productSku    String?
  quantity      Int
  itemPrice     Int       // Цена за единицу в копейках
  totalPrice    Int       // Общая стоимость позиции в копейках
  
  // Расчёт кэшбека
  cashbackAmount Int      // Сумма кэшбека за эту позицию
  cashbackType   CashbackType
  cashbackRate   Int?     // Процент или фиксированная сумма
  
  @@map("cashback_items")
}

enum CashbackStatus {
  active
  cancelled
}

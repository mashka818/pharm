const axios = require('axios');

const BASE_URL = 'http://localhost:4000/api';

// –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR-–∫–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testCases = [
  {
    name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π QR –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –§–ù–°',
    qrData: 't=20190409T1638&s=2400.00&fn=9287440300090728&i=77133&fp=1482926127&n=1'
  },
  {
    name: 'QR —Å URL –ø—Ä–µ—Ñ–∏–∫—Å–æ–º',
    qrData: 'https://check.ofd.ru/rec/8710000100186648/77133/1482926127?t=20190409T1638&s=2400.00&fn=9287440300090728&i=77133&fp=1482926127&n=1'
  },
  {
    name: 'QR —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã',
    qrData: 't=20240101T1200&s=1500.50&fn=1234567890123456&i=12345&fp=9876543210&n=1'
  },
  {
    name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π QR',
    qrData: 't=20240101T1200&s=100&fn=1111111111111111&i=1&fp=1&n=1'
  }
];

async function testQrParser() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ QR-–∫–æ–¥–æ–≤...\n');

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`${i + 1}Ô∏è‚É£ ${testCase.name}`);
    console.log(`üì± QR –¥–∞–Ω–Ω—ã–µ: ${testCase.qrData}`);

    try {
      const response = await axios.post(`${BASE_URL}/receipt/parse-qr`, {
        qrData: testCase.qrData
      });

      if (response.data.success) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:');
        console.log(`   üìã –§–ù: ${response.data.data.fn}`);
        console.log(`   üìÑ –§–î: ${response.data.data.fd}`);
        console.log(`   üîê –§–ü: ${response.data.data.fp}`);
        console.log(`   üí∞ –°—É–º–º–∞: ${response.data.data.sum} –∫–æ–ø–µ–µ–∫`);
        console.log(`   üìÖ –î–∞—Ç–∞: ${response.data.data.date}`);
        console.log(`   üî¢ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${response.data.data.typeOperation}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', response.data.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
    }

    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }

  console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testQrParser().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  
  if (error.code === 'ECONNREFUSED') {
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000:');
    console.log('   npm run start:dev');
  }
});
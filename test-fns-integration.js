const axios = require('axios');

const BASE_URL = 'http://localhost:4000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –§–ù–°)
const testQrData = {
  qrData: 't=20190409T1638&s=2400.00&fn=9287440300090728&i=77133&fp=1482926127&n=1'
};

const testReceiptData = {
  fn: '9287440300090728',
  fd: '77133',
  fp: '1482926127',
  sum: '2400',
  date: '2019-04-09T16:38:00',
  typeOperation: '1'
};

async function testFnsIntegration() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –§–ù–°...\n');

  try {
    // 1. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ QR-–∫–æ–¥–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR-–∫–æ–¥–∞...');
    const parseResponse = await axios.post(`${BASE_URL}/receipt/parse-qr`, testQrData);
    console.log('‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', JSON.stringify(parseResponse.data, null, 2));

    // 2. –¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ–∫–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ–∫–∞...');
    const verifyResponse = await axios.post(`${BASE_URL}/receipt/verify/test`, testReceiptData);
    console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞:', JSON.stringify(verifyResponse.data, null, 2));

    const requestId = verifyResponse.data.requestId;

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (requestId) {
      console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞...');
      
      let attempts = 0;
      const maxAttempts = 3;
      
      while (attempts < maxAttempts) {
        try {
          const statusResponse = await axios.get(`${BASE_URL}/receipt/status/${requestId}`);
          const status = statusResponse.data.status;
          
          console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}):`, JSON.stringify(statusResponse.data, null, 2));
          
          if (status === 'success' || status === 'rejected' || status === 'failed') {
            console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:', status);
            break;
          }
          
          if (status === 'processing' || status === 'pending') {
            if (attempts < maxAttempts - 1) {
              console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
              await new Promise(resolve => setTimeout(resolve, 2000));
            } else {
              console.log('‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –ó–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.');
            }
            attempts++;
            continue;
          }
          
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.response?.data || error.message);
          break;
        }
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
    try {
      const statsResponse = await axios.get(`${BASE_URL}/receipt/stats/queue`);
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:', JSON.stringify(statsResponse.data, null, 2));
    } catch (error) {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞...');
    try {
      const limitResponse = await axios.get(`${BASE_URL}/receipt/stats/daily-count`);
      console.log('üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:', JSON.stringify(limitResponse.data, null, 2));
    } catch (error) {
      console.log('‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ–≤–Ω–æ–º –ª–∏–º–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:');
    console.log('‚Ä¢ –°—Ç–∞—Ç—É—Å "failed" –∏–ª–∏ "pending" –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    console.log('‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –§–ù–° –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
    console.log('‚Ä¢ –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤ —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç "success" –∏–ª–∏ "rejected"');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000:');
      console.log('   npm run start:dev');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFnsIntegration();
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
const config = {
  baseURL: 'http://localhost:4000',
  headers: {
    'Content-Type': 'application/json',
  },
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  // QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ù–°
  qrCode: 't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345&fp=1234567890&n=1',
  
  // –¢–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
  token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInJvbGUiOiJDVVNUT01FUiIsIm5ldHdvcmtJZCI6MSwiaWF0IjoxNzM1NzI4MDAwLCJleHAiOjE3MzU4MTQ0MDB9.test_signature',
  
  // –ü–æ–¥–¥–æ–º–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  subdomains: [
    '—Ä-—Ñ–∞—Ä–º.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'apteka-36-6.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'invalid-subdomain.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
  ],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function testQrScanning() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...\n');

  for (const subdomain of testData.subdomains) {
    console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–æ–º–µ–Ω: ${subdomain}`);
    
    try {
      const response = await axios.post('/fns/qr/scan', {
        qrCode: testData.qrCode,
        token: testData.token,
        additionalData: {
          test: true,
          timestamp: new Date().toISOString(),
        },
      }, {
        ...config,
        headers: {
          ...config.headers,
          'Host': subdomain,
        },
      });

      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:');
      console.log(JSON.stringify(response.data, null, 2));
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞:');
      if (error.response) {
        console.log(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data, null, 2)}`);
      } else {
        console.log(`–û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    console.log('---\n');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ QR-–∫–æ–¥–∞
function testQrParsing() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞...\n');

  const qrParser = {
    parseQrCode: (qrCode) => {
      const params = new URLSearchParams(qrCode);
      
      const fn = params.get('fn');
      const i = params.get('i');
      const fp = params.get('fp');
      const s = params.get('s');
      const t = params.get('t');
      const n = params.get('n');

      if (!fn || !i || !fp || !s || !t) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.');
      }

      const parseFnsDate = (dateStr) => {
        const year = dateStr.substring(0, 4);
        const month = dateStr.substring(4, 6);
        const day = dateStr.substring(6, 8);
        const hour = dateStr.substring(9, 11);
        const minute = dateStr.substring(11, 13);
        
        return `${year}-${month}-${day}T${hour}:${minute}:00`;
      };

      return {
        fn,
        fd: i,
        fp,
        sum: s,
        date: parseFnsDate(t),
        typeOperation: n || '1',
      };
    },

    validateQrCode: (qrCode) => {
      try {
        const params = new URLSearchParams(qrCode);
        const requiredParams = ['fn', 'i', 'fp', 's', 't'];
        
        return requiredParams.every(param => params.has(param));
      } catch {
        return false;
      }
    },
  };

  // –¢–µ—Å—Ç–æ–≤—ã–µ QR-–∫–æ–¥—ã
  const testQrCodes = [
    't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345&fp=1234567890&n=1',
    't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345&fp=1234567890',
    'invalid-qr-code',
    't=20231201T1430&s=1234.56&fn=9287440300090728&i=12345',
  ];

  for (const qrCode of testQrCodes) {
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º QR-–∫–æ–¥: ${qrCode}`);
    
    try {
      const isValid = qrParser.validateQrCode(qrCode);
      console.log(`–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isValid ? '‚úÖ' : '‚ùå'}`);
      
      if (isValid) {
        const parsed = qrParser.parseQrCode(qrCode);
        console.log('–ü–∞—Ä—Å–∏–Ω–≥:');
        console.log(JSON.stringify(parsed, null, 2));
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
    }
    
    console.log('---\n');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–¥–æ–º–µ–Ω–∞
function testSubdomainExtraction() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤...\n');

  const extractSubdomain = (host) => {
    if (!host) return null;

    const hostWithoutPort = host.split(':')[0];
    const parts = hostWithoutPort.split('.');
    
    if (parts.length >= 3) {
      return parts[0];
    }
    
    return null;
  };

  const testHosts = [
    '—Ä-—Ñ–∞—Ä–º.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'apteka-36-6.—á–µ–∫–ø–æ–∏–Ω—Ç.—Ä—Ñ',
    'test.localhost:4000',
    'localhost:4000',
    'invalid-host',
    null,
  ];

  for (const host of testHosts) {
    const subdomain = extractSubdomain(host);
    console.log(`–•–æ—Å—Ç: ${host || 'null'}`);
    console.log(`–ü–æ–¥–¥–æ–º–µ–Ω: ${subdomain || 'null'}`);
    console.log('---\n');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –§–ù–°\n');
  
  // –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ QR-–∫–æ–¥–∞
  testQrParsing();
  
  // –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–¥–æ–º–µ–Ω–∞
  testSubdomainExtraction();
  
  // –¢–µ—Å—Ç API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
  console.log('‚ö†Ô∏è  –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:4000');
  console.log('–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: npm run start:dev\n');
  
  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
  // await testQrScanning();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);
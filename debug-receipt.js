const axios = require('axios');

// –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ —á–µ–∫–∞
const TEST_RECEIPT = {
  fn: "7380440801438274",
  fd: "156960", 
  fp: "881863638",
  sum: 120,
  date: "2025-06-01T20:29:00",
  typeOperation: 1,
  additionalData: {}
};

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CORRECTED_RECEIPTS = [
  {
    ...TEST_RECEIPT,
    date: "2024-06-01T20:29:00", // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–¥
    name: "Fixed year (2024)"
  },
  {
    ...TEST_RECEIPT,
    sum: 12000, // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É–º–º—É (120 —Ä—É–±–ª–µ–π = 12000 –∫–æ–ø–µ–µ–∫)
    date: "2024-06-01T20:29:00",
    name: "Fixed year and sum (12000 kopecks)"
  },
  {
    ...TEST_RECEIPT,
    date: "2023-06-01T20:29:00", // –ü—Ä–æ–±—É–µ–º 2023 –≥–æ–¥
    name: "Try year 2023"
  }
];

async function testReceipt(receipt, name = "Original") {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${name}`);
  console.log(`üìã –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(receipt)}`);
  
  try {
    const response = await axios.post('http://localhost:3000/fns/debug-receipt', receipt, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.data.finalResult?.status}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${response.data.finalResult?.message}`);
    
    if (response.data.errors && response.data.errors.length > 0) {
      console.log(`‚ùå –û—à–∏–±–∫–∏:`);
      response.data.errors.forEach(error => console.log(`   - ${error}`));
    }
    
    if (response.data.warnings && response.data.warnings.length > 0) {
      console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:`);
      response.data.warnings.forEach(warning => console.log(`   - ${warning}`));
    }

    if (response.data.finalResult?.suggestedSum && response.data.finalResult.suggestedSum !== receipt.sum) {
      console.log(`üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—É–º–º–∞: ${response.data.finalResult.suggestedSum} –∫–æ–ø–µ–µ–∫ –≤–º–µ—Å—Ç–æ ${receipt.sum}`);
    }

    if (response.data.finalResult?.dateAnalysis) {
      const dateAnalysis = response.data.finalResult.dateAnalysis;
      console.log(`üìÖ –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç—ã:`);
      console.log(`   –û—Ä–∏–≥–∏–Ω–∞–ª: ${dateAnalysis.original}`);
      console.log(`   –ì–æ–¥: ${dateAnalysis.year}`);
      console.log(`   –í –±—É–¥—É—â–µ–º: ${dateAnalysis.isInFuture}`);
      console.log(`   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥: ${dateAnalysis.isReasonableYear}`);
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
    if (error.response?.data) {
      console.log(`   –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data)}`);
    }
  }
}

async function runAllTests() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —á–µ–∫–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏\n');
  console.log('=' * 50);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫
  await testReceipt(TEST_RECEIPT, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫");
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  for (const receipt of CORRECTED_RECEIPTS) {
    await testReceipt(receipt, receipt.name);
  }
  
  console.log('\nüèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É —á–µ–∫–∞ - –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (120 —Ä—É–±–ª–µ–π = 12000 –∫–æ–ø–µ–µ–∫)');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (fn, fd, fp)');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { testReceipt, TEST_RECEIPT, CORRECTED_RECEIPTS };
const axios = require('axios');
const FnsAuthTest = require('./fns-auth.test');
const FnsCheckTest = require('./fns-check.test');

class FnsIntegrationTest {
  constructor() {
    this.authTest = new FnsAuthTest();
    this.checkTest = new FnsCheckTest();
    this.baseUrl = process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090';
    this.serviceUrl = `${this.baseUrl}/open-api/ais3/KktService/0.1`;
    this.cachedToken = null;
  }

  async getValidToken() {
    if (this.cachedToken) {
      return this.cachedToken;
    }
    
    console.log('üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const authResult = await this.authTest.testAuthentication();
    
    if (!authResult.success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: ${authResult.error}`);
    }
    
    this.cachedToken = authResult.token;
    return this.cachedToken;
  }

  async testGetMessagesMultiple() {
    console.log('üì• === –¢–µ—Å—Ç GetMessages —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ===');
    
    try {
      const token = await this.getValidToken();
      
      const testReceipts = [
        {
          fn: '9287440300090728',
          fd: '77133',
          fp: '1482926127',
          sum: 240000,
          date: '2019-04-09T16:38:00',
          typeOperation: 1
        },
        {
          fn: '9287440300090728',
          fd: '77134',
          fp: '1482926128',
          sum: 150000,
          date: '2019-04-09T17:00:00',
          typeOperation: 1
        }
      ];
      
      const messageIds = [];
      
      for (let i = 0; i < testReceipts.length; i++) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${i + 1}/${testReceipts.length}...`);
        const sendResult = await this.checkTest.testSendMessage(testReceipts[i]);
        
        if (sendResult.success) {
          messageIds.push(sendResult.messageId);
          console.log(`‚úÖ MessageId ${i + 1}: ${sendResult.messageId}`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${i + 1}: ${sendResult.error}`);
        }
        
        await this.sleep(1000);
      }
      
      if (messageIds.length === 0) {
        return { success: false, error: 'No messages sent successfully' };
      }
      
      console.log(`\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ ${messageIds.length} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ GetMessages...`);
      
      const getMessagesResult = await this.makeGetMessagesRequest(messageIds, token);
      
      if (getMessagesResult.success) {
        console.log('‚úÖ –£–°–ü–ï–•: GetMessages –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${getMessagesResult.messages.length}`);
        return { success: true, messageIds, messages: getMessagesResult.messages };
      } else {
        console.log(`‚ùå –û–®–ò–ë–ö–ê GetMessages: ${getMessagesResult.error}`);
        return { success: false, error: getMessagesResult.error };
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error.message);
      return { success: false, error: error.message };
    }
  }

  async makeGetMessagesRequest(messageIds, token) {
    const expressionsXml = messageIds.map(messageId => `
      <ns:Expressions>
        <ns:MessageId>${messageId}</ns:MessageId>
        <ns:UserToken>TestUserToken</ns:UserToken>
      </ns:Expressions>
    `).join('');
    
    const soapRequest = `
      <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
        <soapenv:Header/>
        <soapenv:Body>
          <ns:GetMessagesRequest>
            ${expressionsXml}
          </ns:GetMessagesRequest>
        </soapenv:Body>
      </soapenv:Envelope>
    `;

    try {
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:GetMessagesRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GetMessages: ${response.status}`);
      
      const messages = this.parseGetMessagesResponse(response.data);
      return { success: true, messages };
      
    } catch (error) {
      if (error.response) {
        console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üìÑ –¢–µ–ª–æ –æ—à–∏–±–∫–∏:`, error.response.data);
        
        if (error.response.data && typeof error.response.data === 'string') {
          if (error.response.data.includes('–í –∑–∞–ø—Ä–æ—Å–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ messageId')) {
            return { success: false, error: 'Too many messageIds in request' };
          } else if (error.response.data.includes('–í –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è messageId')) {
            return { success: false, error: 'Duplicate messageIds in request' };
          } else if (error.response.data.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Ç–æ–¥–∞ GetMessages')) {
            return { success: false, error: 'GetMessages rate limit exceeded' };
          }
        }
      }
      
      return { success: false, error: error.message };
    }
  }

  parseGetMessagesResponse(xmlResponse) {
    const messages = [];
    
    const messageBlocks = xmlResponse.match(/<Messages>.*?<\/Messages>/gs);
    
    if (messageBlocks) {
      messageBlocks.forEach(block => {
        const messageIdMatch = block.match(/<MessageId>([^<]+)<\/MessageId>/);
        const statusMatch = block.match(/<ProcessingStatus>([^<]+)<\/ProcessingStatus>/);
        const messageContentMatch = block.match(/<Message>(.*?)<\/Message>/s);
        const fileLinkMatches = block.match(/<FileLinks>([^<]+)<\/FileLinks>/g);
        
        const message = {
          messageId: messageIdMatch ? messageIdMatch[1] : null,
          processingStatus: statusMatch ? statusMatch[1] : 'UNKNOWN',
          message: messageContentMatch ? messageContentMatch[1] : null,
          fileLinks: fileLinkMatches ? fileLinkMatches.map(match => match.replace(/<\/?FileLinks>/g, '')) : []
        };
        
        messages.push(message);
      });
    }
    
    return messages;
  }

  async testDuplicateMessageIds() {
    console.log('\nüîÑ === –¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö MessageId ===');
    
    try {
      const token = await this.getValidToken();
      
      const duplicateMessageId = '12345678-1234-1234-1234-123456789012';
      const messageIds = [duplicateMessageId, duplicateMessageId];
      
      const result = await this.makeGetMessagesRequest(messageIds, token);
      
      if (!result.success && result.error.includes('Duplicate messageIds')) {
        console.log('‚úÖ –£–°–ü–ï–•: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ MessageId –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
        return { success: true, errorType: 'DUPLICATE_HANDLED' };
      } else if (result.success) {
        console.log('‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ MessageId –ø—Ä–∏–Ω—è—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç)');
        return { success: true, errorType: 'DUPLICATE_ACCEPTED' };
      } else {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${result.error}`);
        return { success: false, error: result.error };
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö MessageId:', error.message);
      return { success: false, error: error.message };
    }
  }

  async testExcessiveMessageIds() {
    console.log('\nüìä === –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ MessageId ===');
    
    try {
      const token = await this.getValidToken();
      
      const manyMessageIds = [];
      for (let i = 0; i < 50; i++) {
        manyMessageIds.push(`12345678-1234-1234-1234-12345678901${i.toString().padStart(1, '0')}`);
      }
      
      const result = await this.makeGetMessagesRequest(manyMessageIds, token);
      
      if (!result.success && result.error.includes('Too many messageIds')) {
        console.log('‚úÖ –£–°–ü–ï–•: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ MessageId –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
        return { success: true, errorType: 'LIMIT_ENFORCED' };
      } else if (result.success) {
        console.log('‚ÑπÔ∏è –í—Å–µ MessageId –ø—Ä–∏–Ω—è—Ç—ã (–ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–ª–∏ –±–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ)');
        return { success: true, errorType: 'WITHIN_LIMIT' };
      } else {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${result.error}`);
        return { success: false, error: result.error };
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ MessageId:', error.message);
      return { success: false, error: error.message };
    }
  }

  async testFileLinksProcessing() {
    console.log('\nüìÅ === –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ FileLinks ===');
    console.log('üí° –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏');
    
    try {
      const token = await this.getValidToken();
      
      const soapRequestWithFiles = `
        <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
          <soap-env:Body>
            <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
              <ns0:Message>
                <ns1:GetNewlyUnboundTaxpayersRequest xmlns:ns1="urn://x-artefacts-gnivc-ru/ais3/SMZ/SmzPartnersIntegrationService/types/1.0">
                  <ns1:From>2019-02-27T20:49:13</ns1:From>
                  <ns1:Limit>100</ns1:Limit>
                  <ns1:Offset>0</ns1:Offset>
                </ns1:GetNewlyUnboundTaxpayersRequest>
              </ns0:Message>
              <ns0:FileLinks>test/test1.txt</ns0:FileLinks>
              <ns0:FileLinks>test/test2.txt</ns0:FileLinks>
            </ns0:SendMessageRequest>
          </soap-env:Body>
        </soap-env:Envelope>
      `;

      const response = await axios.post(this.serviceUrl, soapRequestWithFiles, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      const messageId = this.parseSendMessageResponse(response.data);
      console.log(`üéØ MessageId —Å FileLinks: ${messageId}`);
      
      console.log('‚úÖ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏–µ —Å FileLinks –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return { success: true, messageId, hasFileLinks: true };
      
    } catch (error) {
      if (error.response && error.response.data) {
        const errorData = error.response.data;
        if (errorData.includes('–ü–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
          console.log('‚úÖ –£–°–ü–ï–•: FileNotFound –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫)');
          return { success: true, errorType: 'FILE_NOT_FOUND' };
        } else if (errorData.includes('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã')) {
          console.log('‚úÖ –£–°–ü–ï–•: –õ–∏–º–∏—Ç FileLinks –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
          return { success: true, errorType: 'FILE_LINKS_LIMIT' };
        }
      }
      
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ FileLinks:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  async testInvalidFileLinks() {
    console.log('\nüö´ === –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö FileLinks ===');
    
    try {
      const token = await this.getValidToken();
      
      const soapRequestWithInvalidFiles = `
        <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
          <soap-env:Body>
            <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
              <ns0:Message>
                <ns1:GetNewlyUnboundTaxpayersRequest xmlns:ns1="urn://x-artefacts-gnivc-ru/ais3/SMZ/SmzPartnersIntegrationService/types/1.0">
                  <ns1:From>2019-02-27T20:49:13</ns1:From>
                  <ns1:Limit>100</ns1:Limit>
                  <ns1:Offset>0</ns1:Offset>
                </ns1:GetNewlyUnboundTaxpayersRequest>
              </ns0:Message>
              <ns0:FileLinks>test/te?st2.txt</ns0:FileLinks>
            </ns0:SendMessageRequest>
          </soap-env:Body>
        </soap-env:Envelope>
      `;

      await axios.post(this.serviceUrl, soapRequestWithInvalidFiles, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ FileLinks –ø—Ä–∏–Ω—è—Ç—ã');
      return { success: false, error: 'Invalid FileLinks accepted' };
      
    } catch (error) {
      if (error.response && error.response.data) {
        const errorData = error.response.data;
        if (errorData.includes('–ü–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
          console.log('‚úÖ –£–°–ü–ï–•: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ FileLinks –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
          return { success: true, errorType: 'INVALID_FILE_LINKS' };
        }
      }
      
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö FileLinks:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  parseSendMessageResponse(xmlResponse) {
    const messageIdMatch = xmlResponse.match(/<MessageId>([^<]+)<\/MessageId>/);
    if (messageIdMatch) {
      return messageIdMatch[1];
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å MessageId –∏–∑ –æ—Ç–≤–µ—Ç–∞');
  }

  async testCompleteCycle() {
    console.log('\nüîÑ === –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ===');
    
    const results = {
      auth: null,
      sendMessage: null,
      getMessage: null,
      getMessages: null
    };
    
    try {
      console.log('1Ô∏è‚É£ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...');
      results.auth = await this.authTest.testAuthentication();
      if (!results.auth.success) {
        return { success: false, stage: 'auth', results };
      }
      
      console.log('2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      results.sendMessage = await this.checkTest.testSendMessage();
      if (!results.sendMessage.success) {
        return { success: false, stage: 'sendMessage', results };
      }
      
      console.log('3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      await this.sleep(2000); 
      results.getMessage = await this.checkTest.testGetMessage(results.sendMessage.messageId);
      if (!results.getMessage.success) {
        return { success: false, stage: 'getMessage', results };
      }
      
      console.log('4Ô∏è‚É£ –¢–µ—Å—Ç GetMessages...');
      results.getMessages = await this.makeGetMessagesRequest(
        [results.sendMessage.messageId], 
        results.auth.token
      );
      if (!results.getMessages.success) {
        return { success: false, stage: 'getMessages', results };
      }
      
      console.log('üéâ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return { success: true, results };
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ:', error.message);
      return { success: false, error: error.message, results };
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async runAllTests() {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í –§–ù–° ===\n');
    
    const results = {
      completeCycle: await this.testCompleteCycle(),
      getMessagesMultiple: await this.testGetMessagesMultiple(),
      duplicateMessageIds: await this.testDuplicateMessageIds(),
      excessiveMessageIds: await this.testExcessiveMessageIds(),
      fileLinksProcessing: await this.testFileLinksProcessing(),
      invalidFileLinks: await this.testInvalidFileLinks()
    };
    
    console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    Object.entries(results).forEach(([testName, result]) => {
      const status = result.success ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
      const errorType = result.errorType ? ` [${result.errorType}]` : '';
      const stage = result.stage ? ` (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${result.stage})` : '';
      console.log(`${status} ${testName}${errorType}${stage}`);
    });
    
    const allPassed = Object.values(results).every(result => result.success);
    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allPassed ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´'}`);
    
    return results;
  }
}

if (require.main === module) {
  const test = new FnsIntegrationTest();
  test.runAllTests()
    .then(results => {
      const allPassed = Object.values(results).every(result => result.success);
      process.exit(allPassed ? 0 : 1);
    })
    .catch(error => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
      process.exit(1);
    });
}

module.exports = FnsIntegrationTest;
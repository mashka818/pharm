const axios = require('axios');
const FnsAuthTest = require('./fns-auth.test');

class FnsCheckTest {
  constructor() {
    this.authTest = new FnsAuthTest();
    this.baseUrl = process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090';
    this.serviceUrl = `${this.baseUrl}/open-api/ais3/KktService/0.1`;
    this.cachedToken = null;
    
    this.testReceiptData = {
      fn: '9287440300090728',
      fd: '77133', 
      fp: '1482926127',
      sum: 240000, 
      date: '2019-04-09T16:38:00',
      typeOperation: 1
    };
  }

  async getValidToken() {
    if (this.cachedToken) {
      return this.cachedToken;
    }
    
    console.log('üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const authResult = await this.authTest.testAuthentication();
    
    if (!authResult.success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: ${authResult.error}`);
    }
    
    this.cachedToken = authResult.token;
    return this.cachedToken;
  }

  async testSendMessage(receiptData = this.testReceiptData) {
    console.log('üì§ === –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (SendMessage) ===');
    console.log(`–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞: ${JSON.stringify(receiptData)}`);
    
    try {
      const token = await this.getValidToken();
      
      const soapRequest = `
        <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
          <soap-env:Body>
            <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
              <ns0:Message>
                <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/KktTicketService/types/1.0">
                  <tns:GetTicketInfo>
                    <tns:Sum>${receiptData.sum}</tns:Sum>
                    <tns:Date>${receiptData.date}</tns:Date>
                    <tns:Fn>${receiptData.fn}</tns:Fn>
                    <tns:TypeOperation>${receiptData.typeOperation || 1}</tns:TypeOperation>
                    <tns:FiscalDocumentId>${receiptData.fd}</tns:FiscalDocumentId>
                    <tns:FiscalSign>${receiptData.fp}</tns:FiscalSign>
                    <tns:RawData>true</tns:RawData>
                  </tns:GetTicketInfo>
                </tns:GetTicketRequest>
              </ns0:Message>
            </ns0:SendMessageRequest>
          </soap-env:Body>
        </soap-env:Envelope>
      `;

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP –∑–∞–ø—Ä–æ—Å–∞ SendMessage...');
      
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, response.headers);
      
      const messageId = this.parseSendMessageResponse(response.data);
      console.log(`üéØ –ü–æ–ª—É—á–µ–Ω MessageId: ${messageId}`);
      
      if (messageId && messageId.length > 10) {
        console.log('‚úÖ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return { success: true, messageId };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π MessageId');
        return { success: false, error: 'Invalid MessageId format' };
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:');
      
      if (error.response) {
        console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üìÑ –¢–µ–ª–æ –æ—à–∏–±–∫–∏:`, error.response.data);
        
        if (error.response.status === 429) {
          console.log('üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (Rate Limiting)');
        } else if (error.response.data && typeof error.response.data === 'string') {
          if (error.response.data.includes('–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è token –∑–∞–ø—Ä–µ—â–µ–Ω')) {
            console.log('üîë –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω');
          } else if (error.response.data.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç')) {
            console.log('üìä –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤');
          }
        }
      }
      
      return { success: false, error: error.message };
    }
  }

  async testGetMessage(messageId) {
    console.log('\nüì• === –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (GetMessage) ===');
    console.log(`MessageId: ${messageId}`);
    
    try {
      const token = await this.getValidToken();
      
      const soapRequest = `
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
          <soapenv:Header/>
          <soapenv:Body>
            <ns:GetMessageRequest>
              <ns:MessageId>${messageId}</ns:MessageId>
            </ns:GetMessageRequest>
          </soapenv:Body>
        </soapenv:Envelope>
      `;

      console.log('üì• –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP –∑–∞–ø—Ä–æ—Å–∞ GetMessage...');
      
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:GetMessageRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      
      const result = this.parseGetMessageResponse(response.data);
      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingStatus}`);
      
      if (result.processingStatus === 'COMPLETED') {
        console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        if (result.message) {
          console.log('üìÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞');
          console.log(result.message);
        }
        console.log('‚úÖ –£–°–ü–ï–•: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω');
        return { success: true, ...result };
      } else if (result.processingStatus === 'PROCESSING') {
        console.log('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
        console.log('‚ÑπÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥');
        return { success: true, ...result, needRetry: true };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return { success: false, error: 'Unknown processing status' };
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:');
      
      if (error.response) {
        console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üìÑ –¢–µ–ª–æ –æ—à–∏–±–∫–∏:`, error.response.data);
        
        if (error.response.data && typeof error.response.data === 'string') {
          if (error.response.data.includes('–ü–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É MessageId') && error.response.data.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')) {
            console.log('üîç –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ MessageId –∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
          } else if (error.response.data.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Ç–æ–¥–∞ GetMessage')) {
            console.log('üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ GetMessage –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ MessageId');
          }
        }
      }
      
      return { success: false, error: error.message };
    }
  }

  async testFullCycle(receiptData = this.testReceiptData) {
    console.log('\nüîÑ === –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ ===');
    
    const sendResult = await this.testSendMessage(receiptData);
    if (!sendResult.success) {
      return { success: false, error: 'Failed to send message', details: sendResult };
    }
    
    const messageId = sendResult.messageId;
    const maxRetries = 5;
    let retryCount = 0;
    
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    while (retryCount < maxRetries) {
      await this.sleep(2000); 
      
      const getResult = await this.testGetMessage(messageId);
      
      if (!getResult.success) {
        return { success: false, error: 'Failed to get message', details: getResult };
      }
      
      if (getResult.processingStatus === 'COMPLETED') {
        console.log('üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return { 
          success: true, 
          sendResult, 
          getResult,
          cycles: retryCount + 1
        };
      }
      
      retryCount++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}: –°—Ç–∞—Ç—É—Å - ${getResult.processingStatus}`);
    }
    
    console.log('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    return { 
      success: false, 
      error: 'Processing timeout', 
      details: { sendResult, retries: maxRetries }
    };
  }

  async testInvalidMessageId() {
    console.log('\nüß™ === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º MessageId ===');
    
    const invalidMessageId = '00000000-0000-0000-0000-000000000000';
    const result = await this.testGetMessage(invalidMessageId);
    
    if (!result.success && result.error.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')) {
      console.log('‚úÖ –£–°–ü–ï–•: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π MessageId –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      return { success: true };
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π MessageId');
      return { success: false, error: 'Unexpected response for invalid MessageId' };
    }
  }

  parseSendMessageResponse(xmlResponse) {
    const messageIdPatterns = [
      /<MessageId>([^<]+)<\/MessageId>/,
      /<ns:MessageId>([^<]+)<\/ns:MessageId>/,
      /<tns:MessageId>([^<]+)<\/tns:MessageId>/
    ];
    
    for (const pattern of messageIdPatterns) {
      const match = xmlResponse.match(pattern);
      if (match) {
        return match[1];
      }
    }
    
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å MessageId –∏–∑ –æ—Ç–≤–µ—Ç–∞');
  }

  parseGetMessageResponse(xmlResponse) {
    const statusPatterns = [
      /<ProcessingStatus>([^<]+)<\/ProcessingStatus>/,
      /<ns:ProcessingStatus>([^<]+)<\/ns:ProcessingStatus>/
    ];
    
    let processingStatus = 'UNKNOWN';
    for (const pattern of statusPatterns) {
      const match = xmlResponse.match(pattern);
      if (match) {
        processingStatus = match[1];
        break;
      }
    }
    
    let message = null;
    if (processingStatus === 'COMPLETED') {
      const messageMatch = xmlResponse.match(/<Message>(.*?)<\/Message>/s);
      if (messageMatch) {
        message = messageMatch[1];
      }
    }
    
    return { processingStatus, message };
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async runAllTests() {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–†–û–í–ï–†–ö–ò –ß–ï–ö–û–í –§–ù–° ===\n');
    
    const results = {
      sendTest: await this.testSendMessage(),
      invalidMessageTest: await this.testInvalidMessageId(),
      fullCycleTest: await this.testFullCycle()
    };
    
    console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${results.sendTest.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
    console.log(`‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π MessageId: ${results.invalidMessageTest.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
    console.log(`‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: ${results.fullCycleTest.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
    
    const allPassed = Object.values(results).every(result => result.success);
    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allPassed ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´'}`);
    
    return results;
  }
}

if (require.main === module) {
  const test = new FnsCheckTest();
  test.runAllTests()
    .then(results => {
      const allPassed = Object.values(results).every(result => result.success);
      process.exit(allPassed ? 0 : 1);
    })
    .catch(error => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
      process.exit(1);
    });
}

module.exports = FnsCheckTest;
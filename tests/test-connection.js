#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API

const axios = require('axios');

class ConnectionTest {
  constructor() {
    this.baseUrl = process.env.BACKEND_URL || `http://${process.env.PROD_SERVER_IP || '91.236.198.205'}:${process.env.API_PORT || '4000'}`;
  }

  async checkBasicConnection() {
    console.log('üîç === –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ===');
    console.log(`üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä: ${this.baseUrl}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const response = await axios.get(this.baseUrl, { timeout: 5000 });
      console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
      return true;
    } catch (error) {
      if (error.response) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üí¨ –û—Ç–≤–µ—Ç: ${error.response.data?.message || 'No message'}`);
        return true;
      } else {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log(`üí¨ –û—à–∏–±–∫–∞: ${error.message}`);
        return false;
      }
    }
  }

  async checkApiPrefix() {
    console.log('\nüîç === –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–µ—Ñ–∏–∫—Å–∞ ===');
    
    const testPaths = [
      '/api',
      '/api/',
      '/api/health',
      '/'
    ];

    for (const path of testPaths) {
      const url = `${this.baseUrl}${path}`;
      console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
      
      try {
        const response = await axios.get(url, { timeout: 3000 });
        console.log(`  ‚úÖ ${response.status} - ${response.statusText}`);
        if (response.data) {
          console.log(`  üìã –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data).substring(0, 100)}...`);
        }
      } catch (error) {
        if (error.response) {
          console.log(`  üìä ${error.response.status} - ${error.response.statusText}`);
          if (error.response.data?.message) {
            console.log(`  üí¨ ${error.response.data.message.substring(0, 80)}...`);
          }
        } else {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }
  }

  async checkFnsEndpoints() {
    console.log('\nüîç === –ü—Ä–æ–≤–µ—Ä–∫–∞ FNS —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ===');
    
    const fnsEndpoints = [
      '/fns/queue/stats',
      '/fns/daily-count',
      '/api/fns/queue/stats',
      '/api/fns/daily-count'
    ];

    for (const endpoint of fnsEndpoints) {
      const url = `${this.baseUrl}${endpoint}`;
      console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
      
      try {
        const response = await axios.get(url, { 
          timeout: 3000,
          headers: {
            'Authorization': 'Bearer test-token'
          }
        });
        console.log(`  ‚úÖ ${response.status} - FNS —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–π–¥–µ–Ω!`);
        console.log(`  üìã ${JSON.stringify(response.data).substring(0, 100)}...`);
      } catch (error) {
        if (error.response) {
          console.log(`  üìä ${error.response.status} - ${error.response.statusText}`);
          if (error.response.status === 401) {
            console.log(`  üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`);
          } else if (error.response.status === 400) {
            console.log(`  ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`);
          }
        } else {
          console.log(`  ‚ùå ${error.message}`);
        }
      }
    }
  }

  async checkPortRange() {
    console.log('\nüîç === –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ ===');
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã 3000-5000...');
    
    const ip = process.env.PROD_SERVER_IP || '91.236.198.205';
    const ports = [3000, 4000, 4001, 4020, 5000];
    
    for (const port of ports) {
      const url = `http://${ip}:${port}/api/fns/queue/stats`;
      try {
        const response = await axios.get(url, { 
          timeout: 2000,
          headers: { 'Authorization': 'Bearer test' }
        });
        console.log(`  ‚úÖ –ü–æ—Ä—Ç ${port}: FNS API –Ω–∞–π–¥–µ–Ω!`);
        break;
      } catch (error) {
        if (error.response) {
          if (error.response.status === 401 || error.response.status === 400) {
            console.log(`  üéØ –ü–æ—Ä—Ç ${port}: FNS API –Ω–∞–π–¥–µ–Ω! (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)`);
            break;
          } else if (error.response.status === 404) {
            console.log(`  üìä –ü–æ—Ä—Ç ${port}: —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ FNS API –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
        } else if (error.code === 'ECONNREFUSED') {
          console.log(`  ‚ùå –ü–æ—Ä—Ç ${port}: –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç`);
        } else {
          console.log(`  ‚ö†Ô∏è –ü–æ—Ä—Ç ${port}: ${error.message}`);
        }
      }
    }
  }

  async runDiagnostics() {
    console.log('üöÄ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –°–û–ï–î–ò–ù–ï–ù–ò–Ø ===\n');
    
    const connected = await this.checkBasicConnection();
    if (!connected) {
      console.log('\n‚ùå –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
      return;
    }
    
    await this.checkApiPrefix();
    await this.checkFnsEndpoints();
    await this.checkPortRange();
    
    console.log('\nüìã === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');
    console.log('1. –ï—Å–ª–∏ FNS —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–∫–ª—é—á–µ–Ω –ª–∏ FNS –º–æ–¥—É–ª—å –≤ app.module.ts');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
    console.log('\n2. –ï—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É:');
    console.log('   - –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é API_PORT –≤ .env —Ñ–∞–π–ª–µ');
    console.log('\n3. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JWT_SECRET –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  const test = new ConnectionTest();
  test.runDiagnostics()
    .then(() => {
      console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    })
    .catch(error => {
      console.error('\nüí• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    });
}

module.exports = ConnectionTest;
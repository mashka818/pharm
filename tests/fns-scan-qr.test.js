const axios = require('axios');
const jwt = require('jsonwebtoken');

class FnsScanQrTest {
  constructor() {
    this.baseUrl = process.env.BACKEND_URL || `http://${process.env.PROD_SERVER_IP || '91.236.198.205'}:${process.env.API_PORT || '4000'}`;
    this.scanQrEndpoint = `${this.baseUrl}/api/fns/scan-qr`;
    this.jwtSecret = process.env.JWT_SECRET || 'gpW7DtMraBcCf4rXXyMmLZ25cMsrjv6z';
    
    // Test data based on real FNS receipt format
    this.validQrData = {
      fn: '9287440300090728',
      fd: '77133',
      fp: '1482926127',
      sum: 240000, // 2400 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      date: '2019-04-09T16:38:00',
      typeOperation: 1
    };
    
    this.invalidQrData = {
      fn: 'invalid',
      fd: '',
      fp: '',
      sum: -100,
      date: 'invalid-date'
    };

          // Test network domains (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ª–∞—Ç–∏–Ω–∏—Ü–µ –¥–ª—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      this.testDomains = [
        'test.domain.com',
        'example.com',
        'pharmvision.test'
      ];
  }

  // Generate JWT token for testing
  generateTestToken(userId = 1, promotionId = 'test-promotion-id') {
    const payload = {
      id: userId,
      promotionId,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hour
    };
    
    return jwt.sign(payload, this.jwtSecret);
  }

  async testScanQrSuccess() {
    console.log('‚úÖ === –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞ ===');
    console.log(`Endpoint: ${this.scanQrEndpoint}`);
    console.log(`–î–∞–Ω–Ω—ã–µ QR: ${JSON.stringify(this.validQrData)}`);
    
    try {
      const token = this.generateTestToken(1, 'test-promotion-123');
      const host = this.testDomains[0];
      
      console.log(`üîë –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
      console.log(`üåê Host: ${host}`);
      
      const response = await axios.post(this.scanQrEndpoint, this.validQrData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'host': host
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      const result = response.data;
      
      if (result.status && ['pending', 'rejected'].includes(result.status)) {
        console.log('‚úÖ –£–°–ü–ï–•: QR –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log(`üìù –°—Ç–∞—Ç—É—Å: ${result.status}`);
        console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
        
        return {
          success: true,
          status: result.status,
          requestId: result.requestId,
          network: result.network,
          message: result.message
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
        return { success: false, error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞' };
      }
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
        console.log('üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(error.response.data, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏
        if (error.response.status === 400) {
          console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ 400 –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π (–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –ª–∏–º–∏—Ç–∞–º–∏)');
        }
        
        return { 
          success: false, 
          error: error.response.data?.message || error.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
        return { success: false, error: error.message };
      }
    }
  }

  async testScanQrInvalidData() {
    console.log('\nüö´ === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ QR –∫–æ–¥–∞ ===');
    console.log(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(this.invalidQrData)}`);
    
    try {
      const token = this.generateTestToken(1, 'test-promotion-123');
      const host = this.testDomains[0];
      
      const response = await axios.post(this.scanQrEndpoint, this.invalidQrData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'host': host
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π');
      return { success: false, error: '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞' };
      
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ –£–°–ü–ï–•: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üí¨ –û—à–∏–±–∫–∞: ${error.response.data?.message}`);
        
        return { 
          success: true, 
          validationError: error.response.data?.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testScanQrNoAuth() {
    console.log('\nüîê === –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===');
    
    try {
      const host = this.testDomains[0];
      
      const response = await axios.post(this.scanQrEndpoint, this.validQrData, {
        headers: {
          'Content-Type': 'application/json',
          'host': host
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return { success: false, error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è' };
      
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        
        return { 
          success: true, 
          authError: true,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testScanQrInvalidHost() {
    console.log('\nüåê === –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–æ—Å—Ç–æ–º ===');
    
    try {
      const token = this.generateTestToken(1, 'test-promotion-123');
      const invalidHost = 'invalid-domain.com';
      
      console.log(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π host: ${invalidHost}`);
      
      const response = await axios.post(this.scanQrEndpoint, this.validQrData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'host': invalidHost
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞');
      return { success: false, error: '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' };
      
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ –£–°–ü–ï–•: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üí¨ –û—à–∏–±–∫–∞: ${error.response.data?.message}`);
        
        return { 
          success: true, 
          domainError: error.response.data?.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testScanQrMissingHost() {
    console.log('\nüö´ === –¢–µ—Å—Ç –±–µ–∑ Host –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===');
    
    try {
      const token = this.generateTestToken(1, 'test-promotion-123');
      
      const response = await axios.post(this.scanQrEndpoint, this.validQrData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
          // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º host
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è host');
      return { success: false, error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ host –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' };
      
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ –£–°–ü–ï–•: –ü—Ä–æ–≤–µ—Ä–∫–∞ host –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üí¨ –û—à–∏–±–∫–∞: ${error.response.data?.message}`);
        
        return { 
          success: true, 
          hostError: error.response.data?.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testScanQrLargeSum() {
    console.log('\nüí∞ === –¢–µ—Å—Ç —Å –±–æ–ª—å—à–æ–π —Å—É–º–º–æ–π —á–µ–∫–∞ ===');
    
    const largeQrData = {
      ...this.validQrData,
      sum: 50000000 // 500,000 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    };
    
    console.log(`–ë–æ–ª—å—à–∞—è —Å—É–º–º–∞: ${largeQrData.sum} –∫–æ–ø–µ–µ–∫ (${largeQrData.sum / 100} —Ä—É–±–ª–µ–π)`);
    
    try {
      const token = this.generateTestToken(1, 'test-promotion-123');
      const host = this.testDomains[0];
      
      const response = await axios.post(this.scanQrEndpoint, largeQrData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'host': host
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      const result = response.data;
      
      console.log('‚úÖ –£–°–ü–ï–•: –ë–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      console.log(`üìù –°—Ç–∞—Ç—É—Å: ${result.status}`);
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
      
      return {
        success: true,
        status: result.status,
        requestId: result.requestId,
        message: result.message
      };
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
        
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π –æ—à–∏–±–∫–æ–π –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤
        if (error.response.status === 400 && error.response.data?.message?.includes('–ª–∏–º–∏—Ç')) {
          console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–æ–ª—å—à–æ–π —Å—É–º–º—ã - –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ');
        }
        
        return { 
          success: false, 
          error: error.response.data?.message || error.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
        return { success: false, error: error.message };
      }
    }
  }

  async runAllTests() {
    console.log('üöÄ === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è FNS Scan QR ===\n');
    
    const results = {
      scanSuccess: await this.testScanQrSuccess(),
      invalidData: await this.testScanQrInvalidData(),
      noAuth: await this.testScanQrNoAuth(),
      invalidHost: await this.testScanQrInvalidHost(),
      missingHost: await this.testScanQrMissingHost(),
      largeSum: await this.testScanQrLargeSum()
    };

    console.log('\nüìä === –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ FNS Scan QR —Ç–µ—Å—Ç–æ–≤ ===');
    
    let passedTests = 0;
    let totalTests = 0;
    
    Object.entries(results).forEach(([testName, result]) => {
      totalTests++;
      const status = result.success ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
      console.log(`${status} | ${testName}: ${result.error || result.message || 'OK'}`);
      if (result.success) passedTests++;
    });
    
    console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
    
    return {
      passed: passedTests,
      total: totalTests,
      results
    };
  }
}

module.exports = FnsScanQrTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new FnsScanQrTest();
  test.runAllTests()
    .then(summary => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(summary.passed === summary.total ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
const axios = require('axios');
const jwt = require('jsonwebtoken');

class FnsVerifyTest {
  constructor() {
    this.baseUrl = process.env.BACKEND_URL || `http://${process.env.PROD_SERVER_IP || '91.236.198.205'}:${process.env.API_PORT || '4000'}`;
    this.verifyEndpoint = `${this.baseUrl}/api/fns/verify`;
    this.jwtSecret = process.env.JWT_SECRET || 'gpW7DtMraBcCf4rXXyMmLZ25cMsrjv6z';
    
    // Test data based on real FNS receipt format (legacy method uses string format)
    this.validReceiptData = {
      fn: '9287440300090728',
      fd: '77133',
      fp: '1482926127',
      sum: '2400', // —Å—Ç—Ä–æ–∫–∞ –¥–ª—è legacy –º–µ—Ç–æ–¥–∞
      date: '2019-04-09T16:38:00',
      typeOperation: '1'
    };
    
    this.invalidReceiptData = {
      fn: '',
      fd: '',
      fp: '',
      sum: '',
      date: 'invalid-date'
    };

    // Receipt with different parameters for edge case testing
    this.edgeCaseReceipts = [
      {
        fn: '9287440300090728',
        fd: '77134',
        fp: '1482926128',
        sum: '15000', // 150 —Ä—É–±–ª–µ–π
        date: '2019-04-09T17:00:00',
        typeOperation: '1'
      },
      {
        fn: '9287440300090729',
        fd: '77135',
        fp: '1482926129',
        sum: '500000', // 5000 —Ä—É–±–ª–µ–π
        date: '2019-04-10T10:30:00',
        typeOperation: '2' // –≤–æ–∑–≤—Ä–∞—Ç
      }
    ];
  }

  // Generate JWT token for testing
  generateTestToken(userId = 1) {
    const payload = {
      id: userId,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hour
    };
    
    return jwt.sign(payload, this.jwtSecret);
  }

  async testVerifyReceiptSuccess() {
    console.log('‚úÖ === –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ (Legacy –º–µ—Ç–æ–¥) ===');
    console.log(`Endpoint: ${this.verifyEndpoint}`);
    console.log(`–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞: ${JSON.stringify(this.validReceiptData)}`);
    
    try {
      const token = this.generateTestToken(1);
      
      console.log(`üîë –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
      
      const response = await axios.post(this.verifyEndpoint, this.validReceiptData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      if (response.status === 200 && response.data) {
        console.log('‚úÖ –£–°–ü–ï–•: –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
        return {
          success: true,
          data: response.data
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
        return { success: false, error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞' };
      }
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
        console.log('üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(error.response.data, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏
        if (error.response.status === 400) {
          console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ 400 –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π (–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏)');
        }
        
        return { 
          success: false, 
          error: error.response.data?.message || error.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
        return { success: false, error: error.message };
      }
    }
  }

  async testVerifyReceiptInvalidData() {
    console.log('\nüö´ === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ–∫–∞ ===');
    console.log(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(this.invalidReceiptData)}`);
    
    try {
      const token = this.generateTestToken(1);
      
      const response = await axios.post(this.verifyEndpoint, this.invalidReceiptData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π');
      return { success: false, error: '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞' };
      
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ –£–°–ü–ï–•: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üí¨ –û—à–∏–±–∫–∞: ${error.response.data?.message}`);
        
        return { 
          success: true, 
          validationError: error.response.data?.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testVerifyReceiptNoAuth() {
    console.log('\nüîê === –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===');
    
    try {
      const response = await axios.post(this.verifyEndpoint, this.validReceiptData, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return { success: false, error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è' };
      
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        
        return { 
          success: true, 
          authError: true,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testVerifyReceiptInvalidToken() {
    console.log('\nüîê === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º ===');
    
    try {
      const invalidToken = 'invalid.jwt.token';
      
      const response = await axios.post(this.verifyEndpoint, this.validReceiptData, {
        headers: {
          'Authorization': `Bearer ${invalidToken}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return { success: false, error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' };
      
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ –£–°–ü–ï–•: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        
        return { 
          success: true, 
          tokenError: true,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testVerifyReceiptEdgeCases() {
    console.log('\nüîç === –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ===');
    
    const results = [];
    
    for (let i = 0; i < this.edgeCaseReceipts.length; i++) {
      const receiptData = this.edgeCaseReceipts[i];
      console.log(`\nüìù –¢–µ—Å—Ç —Å–ª—É—á–∞—è ${i + 1}: ${JSON.stringify(receiptData)}`);
      
      try {
        const token = this.generateTestToken(i + 2); // —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        
        const response = await axios.post(this.verifyEndpoint, receiptData, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000,
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

        results.push({
          case: i + 1,
          success: true,
          data: response.data,
          receiptData
        });
        
      } catch (error) {
        if (error.response) {
          console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
          
          results.push({
            case: i + 1,
            success: false,
            error: error.response.data?.message || error.message,
            status: error.response.status,
            receiptData
          });
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
          results.push({
            case: i + 1,
            success: false,
            error: error.message,
            receiptData
          });
        }
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    console.log(`\nüìà –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);
    
    return {
      success: true,
      results,
      successRate: successCount / results.length
    };
  }

  async testVerifyReceiptLargeAmount() {
    console.log('\nüí∞ === –¢–µ—Å—Ç —Å –±–æ–ª—å—à–æ–π —Å—É–º–º–æ–π —á–µ–∫–∞ ===');
    
    const largeAmountReceipt = {
      ...this.validReceiptData,
      sum: '1000000' // 10,000 —Ä—É–±–ª–µ–π
    };
    
    console.log(`–ë–æ–ª—å—à–∞—è —Å—É–º–º–∞: ${largeAmountReceipt.sum} —Ä—É–±–ª–µ–π`);
    
    try {
      const token = this.generateTestToken(1);
      
      const response = await axios.post(this.verifyEndpoint, largeAmountReceipt, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      console.log('‚úÖ –£–°–ü–ï–•: –ë–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      
      return {
        success: true,
        data: response.data
      };
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
        
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π –æ—à–∏–±–∫–æ–π –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤
        if (error.response.status === 400) {
          console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ 400 –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π –¥–ª—è –±–æ–ª—å—à–æ–π —Å—É–º–º—ã');
        }
        
        return { 
          success: false, 
          error: error.response.data?.message || error.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
        return { success: false, error: error.message };
      }
    }
  }

  async testVerifyReceiptReturnOperation() {
    console.log('\nüîÑ === –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ ===');
    
    const returnReceipt = {
      ...this.validReceiptData,
      typeOperation: '2', // –≤–æ–∑–≤—Ä–∞—Ç
      fd: '77136', // –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
      fp: '1482926130'
    };
    
    console.log(`–î–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${JSON.stringify(returnReceipt)}`);
    
    try {
      const token = this.generateTestToken(1);
      
      const response = await axios.post(this.verifyEndpoint, returnReceipt, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      console.log('‚úÖ –£–°–ü–ï–•: –û–ø–µ—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      
      return {
        success: true,
        data: response.data
      };
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
        
        return { 
          success: false, 
          error: error.response.data?.message || error.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
        return { success: false, error: error.message };
      }
    }
  }

  async runAllTests() {
    console.log('üöÄ === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è FNS Verify (Legacy) ===\n');
    
    const results = {
      verifySuccess: await this.testVerifyReceiptSuccess(),
      invalidData: await this.testVerifyReceiptInvalidData(),
      noAuth: await this.testVerifyReceiptNoAuth(),
      invalidToken: await this.testVerifyReceiptInvalidToken(),
      edgeCases: await this.testVerifyReceiptEdgeCases(),
      largeAmount: await this.testVerifyReceiptLargeAmount(),
      returnOperation: await this.testVerifyReceiptReturnOperation()
    };

    console.log('\nüìä === –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ FNS Verify —Ç–µ—Å—Ç–æ–≤ ===');
    
    let passedTests = 0;
    let totalTests = 0;
    
    Object.entries(results).forEach(([testName, result]) => {
      totalTests++;
      const status = result.success ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
      console.log(`${status} | ${testName}: ${result.error || result.message || 'OK'}`);
      if (result.success) passedTests++;
    });
    
    console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
    
    return {
      passed: passedTests,
      total: totalTests,
      results
    };
  }
}

module.exports = FnsVerifyTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new FnsVerifyTest();
  test.runAllTests()
    .then(summary => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(summary.passed === summary.total ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
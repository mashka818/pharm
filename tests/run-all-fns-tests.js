#!/usr/bin/env node

const FnsAuthTest = require('./fns-auth.test');
const FnsCheckTest = require('./fns-check.test');
const FnsErrorsTest = require('./fns-errors.test');
const FnsIntegrationTest = require('./fns-integration.test');

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –§–ù–°
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
 */

class FnsTestRunner {
  constructor() {
    this.startTime = Date.now();
    this.results = {};
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    this.testSuites = {
      auth: {
        name: '–¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞',
        class: FnsAuthTest,
        required: true
      },
      check: {
        name: '–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤',
        description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
        class: FnsCheckTest,
        required: true
      },
      errors: {
        name: '–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫',
        class: FnsErrorsTest,
        required: false
      },
      integration: {
        name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã',
        description: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –§–ù–° API',
        class: FnsIntegrationTest,
        required: false
      }
    };
  }

  async runAllTests(options = {}) {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –§–ù–° API ===');
    console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`);
    console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090'}`);
    console.log(`üîë –¢–æ–∫–µ–Ω: ${(process.env.FTX_TOKEN || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é').substring(0, 20)}...`);
    console.log('‚îÄ'.repeat(80));

    const runOnlyRequired = options.onlyRequired || false;
    const skipOptional = options.skipOptional || false;

    let totalTests = 0;
    let passedTests = 0;
    let failedTests = 0;
    let skippedTests = 0;

    for (const [suiteName, suiteConfig] of Object.entries(this.testSuites)) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (skipOptional && !suiteConfig.required) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ ${suiteConfig.name} (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç)\n`);
        skippedTests++;
        continue;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (runOnlyRequired && !suiteConfig.required) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ ${suiteConfig.name} (–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)\n`);
        skippedTests++;
        continue;
      }

      console.log(`\nüß™ === ${suiteConfig.name.toUpperCase()} ===`);
      console.log(`üìù ${suiteConfig.description}`);
      console.log(`üî∏ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: ${suiteConfig.required ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log('‚îÄ'.repeat(60));

      try {
        const testInstance = new suiteConfig.class();
        const suiteStartTime = Date.now();
        
        const result = await testInstance.runAllTests();
        
        const suiteDuration = Date.now() - suiteStartTime;
        const suiteSuccess = this.analyzeSuiteResults(result);
        
        this.results[suiteName] = {
          name: suiteConfig.name,
          required: suiteConfig.required,
          success: suiteSuccess.allPassed,
          duration: suiteDuration,
          details: result,
          passed: suiteSuccess.passed,
          failed: suiteSuccess.failed,
          total: suiteSuccess.total
        };

        totalTests += suiteSuccess.total;
        passedTests += suiteSuccess.passed;
        failedTests += suiteSuccess.failed;

        const statusIcon = suiteSuccess.allPassed ? '‚úÖ' : '‚ùå';
        const statusText = suiteSuccess.allPassed ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù';
        
        console.log(`\n${statusIcon} ${suiteConfig.name}: ${statusText}`);
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${suiteSuccess.passed}/${suiteSuccess.total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(suiteDuration / 1000).toFixed(2)}—Å`);

        // –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω, –º–æ–∂–µ–º –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if (!suiteSuccess.allPassed && suiteConfig.required && options.stopOnFailure) {
          console.log(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω`);
          console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤`);
          break;
        }

      } catch (error) {
        console.log(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ ${suiteConfig.name}:`);
        console.log(`üìÑ –î–µ—Ç–∞–ª–∏: ${error.message}`);
        
        this.results[suiteName] = {
          name: suiteConfig.name,
          required: suiteConfig.required,
          success: false,
          error: error.message,
          duration: 0,
          passed: 0,
          failed: 1,
          total: 1
        };

        totalTests++;
        failedTests++;

        if (suiteConfig.required && options.stopOnFailure) {
          console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏`);
          break;
        }
      }
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    this.generateFinalReport(totalTests, passedTests, failedTests, skippedTests);
    
    return {
      success: failedTests === 0,
      total: totalTests,
      passed: passedTests,
      failed: failedTests,
      skipped: skippedTests,
      results: this.results
    };
  }

  analyzeSuiteResults(result) {
    if (typeof result === 'object' && result !== null) {
      const testResults = Object.values(result);
      const passed = testResults.filter(r => r && r.success === true).length;
      const total = testResults.length;
      const failed = total - passed;
      const allPassed = failed === 0;

      return { allPassed, passed, failed, total };
    }

    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return {
      allPassed: result === true || (result && result.success === true),
      passed: result === true || (result && result.success === true) ? 1 : 0,
      failed: result === true || (result && result.success === true) ? 0 : 1,
      total: 1
    };
  }

  generateFinalReport(totalTests, passedTests, failedTests, skippedTests) {
    const duration = Date.now() - this.startTime;
    const successRate = totalTests > 0 ? (passedTests / totalTests * 100).toFixed(1) : 0;

    console.log('\n' + '='.repeat(80));
    console.log('üìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===');
    console.log('='.repeat(80));
    
    console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`);
    console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedTests}`);
    console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
    console.log(`   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(duration / 1000).toFixed(2)}—Å`);

    console.log(`\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–∞–±–æ—Ä–∞–º —Ç–µ—Å—Ç–æ–≤:`);
    
    Object.entries(this.results).forEach(([suiteName, result]) => {
      const statusIcon = result.success ? '‚úÖ' : '‚ùå';
      const requiredText = result.required ? 'üî∏' : 'üîπ';
      
      console.log(`   ${statusIcon} ${requiredText} ${result.name}`);
      console.log(`      –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.passed || 0}/${result.total || 0} —Ç–µ—Å—Ç–æ–≤`);
      console.log(`      –í—Ä–µ–º—è: ${((result.duration || 0) / 1000).toFixed(2)}—Å`);
      
      if (result.error) {
        console.log(`      –û—à–∏–±–∫–∞: ${result.error}`);
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
    
    if (failedTests === 0) {
      console.log(`   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!`);
      console.log(`   ‚ú® –§–ù–° API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    } else {
      console.log(`   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã`);
      
      const failedRequired = Object.values(this.results)
        .filter(r => !r.success && r.required).length;
      
      if (failedRequired > 0) {
        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–≤–∞–ª–µ–Ω—ã ${failedRequired} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞(–æ–≤)`);
        console.log(`   üõ†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –§–ù–°`);
      }
      
      const authFailed = this.results.auth && !this.results.auth.success;
      if (authFailed) {
        console.log(`   üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–æ–∫–µ–Ω, IP)`);
      }
    }

    console.log('\n' + '='.repeat(80));
    
    const overallSuccess = failedTests === 0;
    const resultIcon = overallSuccess ? 'üéØ' : 'üí•';
    const resultText = overallSuccess ? '–£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û' : '–ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò';
    
    console.log(`${resultIcon} –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ${resultText}`);
    console.log('='.repeat(80));
  }

  async runQuickTest() {
    console.log('‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –§–ù–° ===\n');
    
    try {
      const authTest = new FnsAuthTest();
      const result = await authTest.testAuthentication();
      
      if (result.success) {
        console.log('‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: –§–ù–° API –¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log(`üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${result.token.substring(0, 32)}...`);
        console.log(`‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${result.expiryInfo}`);
        return { success: true, token: result.token };
      } else {
        console.log('‚ùå –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –§–ù–° API');
        console.log(`üìÑ –û—à–∏–±–∫–∞: ${result.error}`);
        return { success: false, error: result.error };
      }
    } catch (error) {
      console.log('‚ùå –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
      console.log(`üìÑ –î–µ—Ç–∞–ª–∏: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  printUsage() {
    console.log(`
üß™ –§–ù–° API Test Runner - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –§–ù–°

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node run-all-fns-tests.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --quick              –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
  --required-only      –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  --skip-optional      –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  --stop-on-failure    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
  --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  FTX_TOKEN           –ú–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –§–ù–° (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
  FTX_API_URL         URL API –§–ù–° (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://openapi.nalog.ru:8090)

–ü—Ä–∏–º–µ—Ä—ã:
  node run-all-fns-tests.js                    # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
  node run-all-fns-tests.js --quick            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  node run-all-fns-tests.js --required-only    # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
  node run-all-fns-tests.js --stop-on-failure  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

–ù–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤:
  üî∏ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
  üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤    - –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
  üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫  - –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
  üîπ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ    - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    `);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async function main() {
  const args = process.argv.slice(2);
  const runner = new FnsTestRunner();

  // –°–ø—Ä–∞–≤–∫–∞
  if (args.includes('--help') || args.includes('-h')) {
    runner.printUsage();
    process.exit(0);
  }

  // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
  if (args.includes('--quick')) {
    const result = await runner.runQuickTest();
    process.exit(result.success ? 0 : 1);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞
  const options = {
    onlyRequired: args.includes('--required-only'),
    skipOptional: args.includes('--skip-optional'),
    stopOnFailure: args.includes('--stop-on-failure')
  };

  try {
    const result = await runner.runAllTests(options);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    process.exit(result.success ? 0 : 1);
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Test Runner:', error.message);
    console.error('üìÑ Stack trace:', error.stack);
    process.exit(2);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(2);
  });
}

module.exports = FnsTestRunner;
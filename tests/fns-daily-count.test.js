const axios = require('axios');
const jwt = require('jsonwebtoken');

class FnsDailyCountTest {
  constructor() {
    this.baseUrl = process.env.BACKEND_URL || `http://${process.env.PROD_SERVER_IP || '91.236.198.205'}:${process.env.PORT || '4020'}`;
    this.dailyCountEndpoint = `${this.baseUrl}/fns/daily-count`;
    this.jwtSecret = process.env.JWT_SECRET || 'gpW7DtMraBcCf4rXXyMmLZ25cMsrjv6z';
    
    // Expected limit from controller
    this.expectedLimit = 1000;
  }

  // Generate JWT token for testing
  generateTestToken(userId = 1) {
    const payload = {
      id: userId,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hour
    };
    
    return jwt.sign(payload, this.jwtSecret);
  }

  async testGetDailyCountSuccess() {
    console.log('‚úÖ === –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å ===');
    console.log(`Endpoint: ${this.dailyCountEndpoint}`);
    
    try {
      const token = this.generateTestToken(1);
      
      console.log(`üîë –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
      
      const response = await axios.get(this.dailyCountEndpoint, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      if (response.status === 200 && response.data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const expectedFields = ['count', 'limit'];
        const hasAllFields = expectedFields.every(field => 
          response.data.hasOwnProperty(field) && typeof response.data[field] === 'number'
        );
        
        if (hasAllFields) {
          console.log('‚úÖ –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞');
          
          const { count, limit } = response.data;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –¥–∞–Ω–Ω—ã—Ö
          const countValid = count >= 0;
          const limitValid = limit > 0;
          const countWithinLimit = count <= limit;
          const limitMatches = limit === this.expectedLimit;
          
          console.log(`üìä Count: ${count} (–≤–∞–ª–∏–¥–µ–Ω: ${countValid ? '‚úÖ' : '‚ùå'})`);
          console.log(`üìä Limit: ${limit} (–≤–∞–ª–∏–¥–µ–Ω: ${limitValid ? '‚úÖ' : '‚ùå'})`);
          console.log(`üìà Count <= Limit: ${countWithinLimit ? '‚úÖ' : '‚ùå'}`);
          console.log(`üîç –û–∂–∏–¥–∞–µ–º—ã–π –ª–∏–º–∏—Ç (${this.expectedLimit}): ${limitMatches ? '‚úÖ' : '‚ùå'}`);
          
          return {
            success: true,
            data: response.data,
            hasAllFields,
            validations: {
              countValid,
              limitValid,
              countWithinLimit,
              limitMatches
            },
            stats: { count, limit }
          };
        } else {
          console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
          const missingFields = expectedFields.filter(field => 
            !response.data.hasOwnProperty(field) || typeof response.data[field] !== 'number'
          );
          console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
          
          return { 
            success: false, 
            error: '–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞',
            missingFields
          };
        }
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
        return { success: false, error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞' };
      }
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
        console.log('üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(error.response.data, null, 2));
        
        return { 
          success: false, 
          error: error.response.data?.message || error.message,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
        return { success: false, error: error.message };
      }
    }
  }

  async testGetDailyCountNoAuth() {
    console.log('\nüîê === –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===');
    
    try {
      const response = await axios.get(this.dailyCountEndpoint, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return { success: false, error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è' };
      
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        
        return { 
          success: true, 
          authError: true,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testGetDailyCountInvalidToken() {
    console.log('\nüîê === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º ===');
    
    try {
      const invalidToken = 'invalid.jwt.token';
      
      const response = await axios.get(this.dailyCountEndpoint, {
        headers: {
          'Authorization': `Bearer ${invalidToken}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return { success: false, error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' };
      
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ –£–°–ü–ï–•: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        
        return { 
          success: true, 
          tokenError: true,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testGetDailyCountMultipleRequests() {
    console.log('\nüîÑ === –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ===');
    
    const results = [];
    const requestCount = 5;
    
    console.log(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ ${requestCount} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    for (let i = 0; i < requestCount; i++) {
      try {
        const token = this.generateTestToken(1); // —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        const response = await axios.get(this.dailyCountEndpoint, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000,
        });

        results.push({
          requestIndex: i,
          success: true,
          data: response.data,
          status: response.status
        });
        
        console.log(`üìä –ó–∞–ø—Ä–æ—Å ${i + 1}: count=${response.data.count}, limit=${response.data.limit}`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        results.push({
          requestIndex: i,
          success: false,
          error: error.response?.data?.message || error.message,
          status: error.response?.status
        });
        
        console.log(`‚ùå –ó–∞–ø—Ä–æ—Å ${i + 1}: –æ—à–∏–±–∫–∞`);
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    console.log(`üìà –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successCount}/${requestCount}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    const successfulResults = results.filter(r => r.success);
    if (successfulResults.length > 1) {
      const counts = successfulResults.map(r => r.data.count);
      const isIncreasing = counts.every((count, index) => 
        index === 0 || count >= counts[index - 1]
      );
      
      console.log(`üìà –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è/–æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º: ${isIncreasing ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìä –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å count: ${counts.join(' -> ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ª–∏–º–∏—Ç–∞
      const limits = successfulResults.map(r => r.data.limit);
      const limitConsistent = limits.every(limit => limit === limits[0]);
      
      console.log(`üîç –õ–∏–º–∏—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º: ${limitConsistent ? '‚úÖ' : '‚ùå'}`);
    }
    
    return {
      success: successCount > 0,
      results,
      successRate: successCount / requestCount,
      totalRequests: requestCount,
      successCount
    };
  }

  async testGetDailyCountDataValidation() {
    console.log('\nüîç === –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ===');
    
    try {
      const token = this.generateTestToken(1);
      
      const response = await axios.get(this.dailyCountEndpoint, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      
      const data = response.data;
      const validationResults = {
        hasCountField: data.hasOwnProperty('count'),
        hasLimitField: data.hasOwnProperty('limit'),
        countIsNumber: typeof data.count === 'number',
        limitIsNumber: typeof data.limit === 'number',
        countNonNegative: data.count >= 0,
        limitPositive: data.limit > 0,
        countWithinLimit: data.count <= data.limit,
        limitMatchesExpected: data.limit === this.expectedLimit
      };
      
      console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
      Object.entries(validationResults).forEach(([key, value]) => {
        console.log(`  ${value ? '‚úÖ' : '‚ùå'} ${key}: ${value ? 'OK' : 'FAILED'}`);
      });
      
      console.log(`\nüìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:`);
      console.log(`  Count: ${data.count} (—Ç–∏–ø: ${typeof data.count})`);
      console.log(`  Limit: ${data.limit} (—Ç–∏–ø: ${typeof data.limit})`);
      console.log(`  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${((data.count / data.limit) * 100).toFixed(1)}%`);
      
      const allValid = Object.values(validationResults).every(v => v);
      
      return {
        success: allValid,
        data,
        validationResults,
        allValid,
        usagePercentage: (data.count / data.limit) * 100
      };
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async testGetDailyCountDifferentUsers() {
    console.log('\nüë• === –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===');
    
    const results = [];
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let userId = 1; userId <= 3; userId++) {
      console.log(`\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      try {
        const token = this.generateTestToken(userId);
        
        const response = await axios.get(this.dailyCountEndpoint, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000,
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        console.log(`üìã –î–∞–Ω–Ω—ã–µ: count=${response.data.count}, limit=${response.data.limit}`);

        results.push({
          userId,
          success: true,
          data: response.data
        });
        
      } catch (error) {
        if (error.response) {
          console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
          
          results.push({
            userId,
            success: false,
            error: error.response.data?.message || error.message,
            status: error.response.status
          });
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
          results.push({
            userId,
            success: false,
            error: error.message
          });
        }
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    console.log(`\nüìà –î–æ—Å—Ç—É–ø —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–º–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const successfulResults = results.filter(r => r.success);
    if (successfulResults.length > 1) {
      const limits = successfulResults.map(r => r.data.limit);
      const allSameLimit = limits.every(limit => limit === limits[0]);
      
      console.log(`üîç –õ–∏–º–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allSameLimit ? '‚úÖ' : '‚ùå'}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ - –æ–Ω–∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
      const counts = successfulResults.map(r => r.data.count);
      console.log(`üìä –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${counts.join(', ')}`);
    }
    
    return {
      success: successCount > 0,
      results,
      successRate: successCount / results.length
    };
  }

  async testGetDailyCountPerformance() {
    console.log('\n‚ö° === –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===');
    
    const requestCount = 10;
    const startTime = Date.now();
    
    console.log(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ ${requestCount} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    
    const promises = [];
    for (let i = 0; i < requestCount; i++) {
      const token = this.generateTestToken(i + 1);
      
      const promise = axios.get(this.dailyCountEndpoint, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      }).then(response => ({
        requestIndex: i,
        success: true,
        data: response.data,
        status: response.status
      })).catch(error => ({
        requestIndex: i,
        success: false,
        error: error.response?.data?.message || error.message,
        status: error.response?.status
      }));
      
      promises.push(promise);
    }
    
    const responses = await Promise.all(promises);
    const endTime = Date.now();
    const totalTime = endTime - startTime;
    
    const successCount = responses.filter(r => r.success).length;
    const avgResponseTime = totalTime / requestCount;
    
    console.log(`üìà –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successCount}/${requestCount}`);
    console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    console.log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);
    console.log(`üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${(requestCount / (totalTime / 1000)).toFixed(2)} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–º–µ—é—Ç –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const successfulResponses = responses.filter(r => r.success);
    const allValidStructure = successfulResponses.every(r => 
      r.data && 
      typeof r.data.count === 'number' && 
      typeof r.data.limit === 'number'
    );
    
    console.log(`üìä –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–º–µ—é—Ç –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: ${allValidStructure ? '‚úÖ' : '‚ùå'}`);
    
    return {
      success: successCount > 0 && allValidStructure,
      results: responses,
      successRate: successCount / requestCount,
      totalTime,
      avgResponseTime,
      throughput: requestCount / (totalTime / 1000),
      allValidStructure
    };
  }

  async runAllTests() {
    console.log('üöÄ === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è FNS Daily Count ===\n');
    
    const results = {
      dailyCountSuccess: await this.testGetDailyCountSuccess(),
      noAuth: await this.testGetDailyCountNoAuth(),
      invalidToken: await this.testGetDailyCountInvalidToken(),
      multipleRequests: await this.testGetDailyCountMultipleRequests(),
      dataValidation: await this.testGetDailyCountDataValidation(),
      differentUsers: await this.testGetDailyCountDifferentUsers(),
      performance: await this.testGetDailyCountPerformance()
    };

    console.log('\nüìä === –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ FNS Daily Count —Ç–µ—Å—Ç–æ–≤ ===');
    
    let passedTests = 0;
    let totalTests = 0;
    
    Object.entries(results).forEach(([testName, result]) => {
      totalTests++;
      const status = result.success ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
      console.log(`${status} | ${testName}: ${result.error || result.message || 'OK'}`);
      if (result.success) passedTests++;
    });
    
    console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
    
    return {
      passed: passedTests,
      total: totalTests,
      results
    };
  }
}

module.exports = FnsDailyCountTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new FnsDailyCountTest();
  test.runAllTests()
    .then(summary => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(summary.passed === summary.total ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
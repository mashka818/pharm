const axios = require('axios');

class FnsAuthTest {
  constructor() {
    this.masterToken = process.env.FTX_TOKEN || 'LFgDIA4yBZjW6h174iwVDcRoDHhjmpuFLtAX3kHPT9ctgggajk36aLJIzIcs2kZyKvTqLy4rSEHi7KOgY0fuNHKPbGCekDg9qjpin04K4ZyfolqtwDBZ6f6Isja3MMWe';
    this.authServiceUrl = process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090';
    this.authEndpoint = `${this.authServiceUrl}/open-api/AuthService/0.1`;
  }

  async testAuthentication() {
    console.log('üîê === –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –§–ù–° ===');
    console.log(`Endpoint: ${this.authEndpoint}`);
    console.log(`Master Token: ${this.masterToken.substring(0, 20)}...`);
    
    const soapRequest = `
      <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0">
        <soapenv:Header/>
        <soapenv:Body>
          <ns:GetMessageRequest>
            <ns:Message>
              <tns:AuthRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/AuthService/types/1.0">
                <tns:AuthAppInfo>
                  <tns:MasterToken>${this.masterToken}</tns:MasterToken>
                </tns:AuthAppInfo>
              </tns:AuthRequest>
            </ns:Message>
          </ns:GetMessageRequest>
        </soapenv:Body>
      </soapenv:Envelope>
    `;

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP –∑–∞–ø—Ä–æ—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
      
      const response = await axios.post(this.authEndpoint, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:GetMessageRequest',
        },
        timeout: 30000,
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, response.headers);
      
      const token = this.parseAuthResponse(response.data);
      const expiryInfo = this.parseExpiryTime(response.data);
      
      console.log(`üéØ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: ${token}`);
      console.log(`‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${expiryInfo}`);
      
      if (token && token.length > 10) {
        console.log('‚úÖ –£–°–ü–ï–•: –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return { success: true, token, expiryInfo };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
        return { success: false, error: 'Invalid token format' };
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
      
      if (error.response) {
        console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—à–∏–±–∫–∏:`, error.response.headers);
        console.log(`üìÑ –¢–µ–ª–æ –æ—à–∏–±–∫–∏:`, error.response.data);
        
        if (error.response.data && typeof error.response.data === 'string') {
          if (error.response.data.includes('–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ IP, –∑–∞–ø—Ä–µ—â–µ–Ω')) {
            console.log('üö´ IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –§–ù–°');
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –§–ù–° –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è IP –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫');
          } else if (error.response.data.includes('–ü—Ä–æ–∏–∑–æ—à–µ–ª timeout –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞')) {
            console.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞');
          } else if (error.response.data.includes('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞')) {
            console.log('üîß –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –§–ù–°');
          }
        }
      } else if (error.request) {
        console.log('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –§–ù–°');
      } else {
        console.log('‚öôÔ∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      }
      
      return { success: false, error: error.message };
    }
  }

  parseAuthResponse(xmlResponse) {
    const tokenPatterns = [
      /<ns2:Token>([^<]+)<\/ns2:Token>/,
      /<Token>([^<]+)<\/Token>/,
      /<tns:Token>([^<]+)<\/tns:Token>/
    ];
    
    for (const pattern of tokenPatterns) {
      const match = xmlResponse.match(pattern);
      if (match) {
        return match[1];
      }
    }
    
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞ –§–ù–°');
  }

  parseExpiryTime(xmlResponse) {
    const expiryPatterns = [
      /<ns2:ExpireTime>([^<]+)<\/ns2:ExpireTime>/,
      /<ExpireTime>([^<]+)<\/ExpireTime>/,
      /<tns:ExpireTime>([^<]+)<\/tns:ExpireTime>/
    ];
    
    for (const pattern of expiryPatterns) {
      const match = xmlResponse.match(pattern);
      if (match) {
        return match[1];
      }
    }
    
    return '–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
  }

  async testInvalidMasterToken() {
    console.log('\nüîê === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–æ–º ===');
    
    const invalidToken = 'invalid_token_123';
    const soapRequest = `
      <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0">
        <soapenv:Header/>
        <soapenv:Body>
          <ns:GetMessageRequest>
            <ns:Message>
              <tns:AuthRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/AuthService/types/1.0">
                <tns:AuthAppInfo>
                  <tns:MasterToken>${invalidToken}</tns:MasterToken>
                </tns:AuthAppInfo>
              </tns:AuthRequest>
            </ns:Message>
          </ns:GetMessageRequest>
        </soapenv:Body>
      </soapenv:Envelope>
    `;

    try {
      const response = await axios.post(this.authEndpoint, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:GetMessageRequest',
        },
        timeout: 30000,
      });
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)');
      return { success: false, error: 'Invalid token was accepted' };
      
    } catch (error) {
      if (error.response && error.response.status === 500) {
        console.log('‚úÖ –£–°–ü–ï–•: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å');
        return { success: true };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
        return { success: false, error: error.message };
      }
    }
  }

  async runAllTests() {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –§–ù–° ===\n');
    
    const results = {
      authTest: await this.testAuthentication(),
      invalidTokenTest: await this.testInvalidMasterToken()
    };
    
    console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${results.authTest.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
    console.log(`‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: ${results.invalidTokenTest.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
    
    const allPassed = Object.values(results).every(result => result.success);
    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allPassed ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´'}`);
    
    return results;
  }
}

if (require.main === module) {
  const test = new FnsAuthTest();
  test.runAllTests()
    .then(results => {
      const allPassed = Object.values(results).every(result => result.success);
      process.exit(allPassed ? 0 : 1);
    })
    .catch(error => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
      process.exit(1);
    });
}

module.exports = FnsAuthTest;
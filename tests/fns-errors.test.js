const axios = require('axios');
const FnsAuthTest = require('./fns-auth.test');

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –§–ù–° API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –§–ù–°
 */

class FnsErrorsTest {
  constructor() {
    this.authTest = new FnsAuthTest();
    this.baseUrl = process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090';
    this.serviceUrl = `${this.baseUrl}/open-api/ais3/KktService/0.1`;
    this.authServiceUrl = `${this.baseUrl}/open-api/AuthService/0.1`;
  }

  async testIpAccessDenied() {
    console.log('üö´ === –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ IP –∞–¥—Ä–µ—Å—É ===');
    console.log('üí° –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ "–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ IP, –∑–∞–ø—Ä–µ—â–µ–Ω"');
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è
      const result = await this.authTest.testAuthentication();
      
      if (!result.success && result.error.includes('IP')) {
        console.log('‚úÖ –£–°–ü–ï–•: IP –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        console.log('üí≠ IP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –§–ù–°');
        return { success: true, errorType: 'IP_BLOCKED' };
      } else if (result.success) {
        console.log('‚ÑπÔ∏è IP —Ä–∞–∑—Ä–µ—à–µ–Ω - —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ª–æ–≤–Ω–æ');
        console.log('üí≠ –°–µ—Ä–≤–µ—Ä –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –§–ù–°');
        return { success: true, errorType: 'IP_ALLOWED' };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: result.error };
      }
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ IP –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  async testInvalidTokenAccess() {
    console.log('\nüîë === –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º ===');
    
    const invalidToken = 'invalid_token_12345';
    const soapRequest = `
      <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
        <soap-env:Body>
          <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
            <ns0:Message>
              <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/KktTicketService/types/1.0">
                <tns:GetTicketInfo>
                  <tns:Sum>100000</tns:Sum>
                  <tns:Date>2023-01-01T12:00:00</tns:Date>
                  <tns:Fn>1234567890123456</tns:Fn>
                  <tns:TypeOperation>1</tns:TypeOperation>
                  <tns:FiscalDocumentId>12345</tns:FiscalDocumentId>
                  <tns:FiscalSign>123456789</tns:FiscalSign>
                  <tns:RawData>true</tns:RawData>
                </tns:GetTicketInfo>
              </tns:GetTicketRequest>
            </ns0:Message>
          </ns0:SendMessageRequest>
        </soap-env:Body>
      </soap-env:Envelope>
    `;

    try {
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
          'FNS-OpenApi-Token': invalidToken,
        },
        timeout: 30000,
      });
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)');
      return { success: false, error: 'Invalid token was accepted' };
      
    } catch (error) {
      if (error.response && error.response.status === 500) {
        const errorData = error.response.data;
        if (errorData.includes('–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è token –∑–∞–ø—Ä–µ—â–µ–Ω')) {
          console.log('‚úÖ –£–°–ü–ï–•: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
          return { success: true, errorType: 'INVALID_TOKEN' };
        } else if (errorData.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏')) {
          console.log('‚úÖ –£–°–ü–ï–•: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
          return { success: true, errorType: 'MISSING_HEADERS' };
        }
      }
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
      console.log('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  async testMissingRequiredHeaders() {
    console.log('\nüìã === –¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ===');
    
    const soapRequest = `
      <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
        <soap-env:Body>
          <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
            <ns0:Message>
              <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/KktTicketService/types/1.0">
                <tns:GetTicketInfo>
                  <tns:Sum>100000</tns:Sum>
                  <tns:Date>2023-01-01T12:00:00</tns:Date>
                  <tns:Fn>1234567890123456</tns:Fn>
                  <tns:TypeOperation>1</tns:TypeOperation>
                  <tns:FiscalDocumentId>12345</tns:FiscalDocumentId>
                  <tns:FiscalSign>123456789</tns:FiscalSign>
                  <tns:RawData>true</tns:RawData>
                </tns:GetTicketInfo>
              </tns:GetTicketRequest>
            </ns0:Message>
          </ns0:SendMessageRequest>
        </soap-env:Body>
      </soap-env:Envelope>
    `;

    try {
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
          // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º FNS-OpenApi-Token
        },
        timeout: 30000,
      });
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)');
      return { success: false, error: 'Request without token was accepted' };
      
    } catch (error) {
      if (error.response && error.response.status === 500) {
        const errorData = error.response.data;
        if (errorData.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏')) {
          console.log('‚úÖ –£–°–ü–ï–•: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
          return { success: true, errorType: 'MISSING_HEADERS' };
        }
      }
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
      console.log('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  async testInvalidXmlStructure() {
    console.log('\nüîß === –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
    let token;
    try {
      const authResult = await this.authTest.testAuthentication();
      if (!authResult.success) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return { success: true, skipped: true, reason: 'No valid token' };
      }
      token = authResult.token;
    } catch (error) {
      console.log('‚ö†Ô∏è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
      return { success: true, skipped: true, reason: 'Authentication unavailable' };
    }
    
    const invalidSoapRequest = `
      <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0">
        <soapenv:Header/>
        <soapenv:Body>
          <ns:GetMessageRequest>
            <ns:Message>
              <test>
                <tns:AuthRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/AuthService/types/1.0">
                  <tns:AuthAppInfo>
                    <tns:MasterToken>invalid_structure</tns:MasterToken>
                  </tns:AuthAppInfo>
                </tns:AuthRequest>
              </test>
            </ns:Message>
          </ns:GetMessageRequest>
        </soapenv:Body>
      </soapenv:Envelope>
    `;

    try {
      const response = await axios.post(this.serviceUrl, invalidSoapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è XML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∞ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)');
      return { success: false, error: 'Invalid XML was accepted' };
      
    } catch (error) {
      if (error.response && error.response.status === 500) {
        const errorData = error.response.data;
        if (errorData.includes('Unmarshalling Error') || errorData.includes('Invalid content')) {
          console.log('‚úÖ –£–°–ü–ï–•: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è XML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
          return { success: true, errorType: 'INVALID_XML' };
        }
      }
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π XML');
      console.log('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  async testMessageNotFound() {
    console.log('\nüîç === –¢–µ—Å—Ç MessageNotFound ===');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
    let token;
    try {
      const authResult = await this.authTest.testAuthentication();
      if (!authResult.success) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return { success: true, skipped: true, reason: 'No valid token' };
      }
      token = authResult.token;
    } catch (error) {
      console.log('‚ö†Ô∏è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
      return { success: true, skipped: true, reason: 'Authentication unavailable' };
    }
    
    const nonExistentMessageId = '00000000-0000-0000-0000-000000000000';
    const soapRequest = `
      <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
        <soapenv:Header/>
        <soapenv:Body>
          <ns:GetMessageRequest>
            <ns:MessageId>${nonExistentMessageId}</ns:MessageId>
          </ns:GetMessageRequest>
        </soapenv:Body>
      </soapenv:Envelope>
    `;

    try {
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:GetMessageRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π MessageId –ø—Ä–∏–Ω—è—Ç (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)');
      return { success: false, error: 'Non-existent MessageId was accepted' };
      
    } catch (error) {
      if (error.response && error.response.status === 500) {
        const errorData = error.response.data;
        if (errorData.includes('–ü–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É MessageId') && errorData.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')) {
          console.log('‚úÖ –£–°–ü–ï–•: MessageNotFound –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
          return { success: true, errorType: 'MESSAGE_NOT_FOUND' };
        }
      }
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MessageNotFound');
      console.log('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
      return { success: false, error: error.message };
    }
  }

  async testRateLimiting() {
    console.log('\n‚è±Ô∏è === –¢–µ—Å—Ç Rate Limiting ===');
    console.log('üí° –°–∏–º—É–ª–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
    let token;
    try {
      const authResult = await this.authTest.testAuthentication();
      if (!authResult.success) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return { success: true, skipped: true, reason: 'No valid token' };
      }
      token = authResult.token;
    } catch (error) {
      console.log('‚ö†Ô∏è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
      return { success: true, skipped: true, reason: 'Authentication unavailable' };
    }
    
    const messageId = '11111111-1111-1111-1111-111111111111';
    const soapRequest = `
      <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
        <soapenv:Header/>
        <soapenv:Body>
          <ns:GetMessageRequest>
            <ns:MessageId>${messageId}</ns:MessageId>
          </ns:GetMessageRequest>
        </soapenv:Body>
      </soapenv:Envelope>
    `;

    let rateLimitHit = false;
    let requestCount = 0;
    const maxRequests = 5; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    for (let i = 0; i < maxRequests; i++) {
      try {
        requestCount++;
        const response = await axios.post(this.serviceUrl, soapRequest, {
          headers: {
            'Content-Type': 'text/xml;charset=UTF-8',
            'SOAPAction': 'urn:GetMessageRequest',
            'FNS-OpenApi-Token': token,
          },
          timeout: 10000,
        });
        
        console.log(`üì§ –ó–∞–ø—Ä–æ—Å ${requestCount}: —Å—Ç–∞—Ç—É—Å ${response.status}`);
        
      } catch (error) {
        if (error.response) {
          if (error.response.status === 429) {
            console.log(`üö´ –ó–∞–ø—Ä–æ—Å ${requestCount}: Hit rate limit (429)`);
            rateLimitHit = true;
            break;
          } else if (error.response.data && error.response.data.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')) {
            console.log(`üö´ –ó–∞–ø—Ä–æ—Å ${requestCount}: Hit rate limit (server message)`);
            rateLimitHit = true;
            break;
          } else {
            console.log(`üì§ –ó–∞–ø—Ä–æ—Å ${requestCount}: —Å—Ç–∞—Ç—É—Å ${error.response.status} (–¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞)`);
          }
        } else {
          console.log(`‚ùå –ó–∞–ø—Ä–æ—Å ${requestCount}: —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞`);
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.sleep(100);
    }
    
    if (rateLimitHit) {
      console.log('‚úÖ –£–°–ü–ï–•: Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return { success: true, errorType: 'RATE_LIMIT', requestCount };
    } else {
      console.log('‚ÑπÔ∏è Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∑–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      return { success: true, errorType: 'NO_RATE_LIMIT', requestCount };
    }
  }

  async testServerInternalError() {
    console.log('\nüîß === –¢–µ—Å—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ ===');
    console.log('üí° –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ –§–ù–°');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
    let token;
    try {
      const authResult = await this.authTest.testAuthentication();
      if (!authResult.success) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return { success: true, skipped: true, reason: 'No valid token' };
      }
      token = authResult.token;
    } catch (error) {
      console.log('‚ö†Ô∏è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
      return { success: true, skipped: true, reason: 'Authentication unavailable' };
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const potentiallyProblematicRequest = `
      <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
        <soap-env:Body>
          <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
            <ns0:Message>
              <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/KktTicketService/types/1.0">
                <tns:GetTicketInfo>
                  <tns:Sum>99999999999</tns:Sum>
                  <tns:Date>1900-01-01T00:00:00</tns:Date>
                  <tns:Fn>0000000000000000</tns:Fn>
                  <tns:TypeOperation>999</tns:TypeOperation>
                  <tns:FiscalDocumentId>0</tns:FiscalDocumentId>
                  <tns:FiscalSign>0</tns:FiscalSign>
                  <tns:RawData>true</tns:RawData>
                </tns:GetTicketInfo>
              </tns:GetTicketRequest>
            </ns0:Message>
          </ns0:SendMessageRequest>
        </soap-env:Body>
      </soap-env:Envelope>
    `;

    try {
      const response = await axios.post(this.serviceUrl, potentiallyProblematicRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
          'FNS-OpenApi-Token': token,
        },
        timeout: 30000,
      });
      
      console.log('‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã');
      return { success: true, errorType: 'REQUEST_ACCEPTED' };
      
    } catch (error) {
      if (error.response && error.response.status === 500) {
        const errorData = error.response.data;
        if (errorData.includes('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞')) {
          console.log('‚úÖ –£–°–ü–ï–•: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
          return { success: true, errorType: 'INTERNAL_ERROR' };
        }
      }
      
      console.log('‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)');
      return { success: true, errorType: 'VALIDATION_ERROR' };
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async runAllTests() {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –§–ù–° ===\n');
    
    const results = {
      ipAccessTest: await this.testIpAccessDenied(),
      invalidTokenTest: await this.testInvalidTokenAccess(),
      missingHeadersTest: await this.testMissingRequiredHeaders(),
      invalidXmlTest: await this.testInvalidXmlStructure(),
      messageNotFoundTest: await this.testMessageNotFound(),
      rateLimitTest: await this.testRateLimiting(),
      internalErrorTest: await this.testServerInternalError()
    };
    
    console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–®–ò–ë–û–ö ===');
    Object.entries(results).forEach(([testName, result]) => {
      const status = result.success ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
      const skipped = result.skipped ? ' (–ü–†–û–ü–£–©–ï–ù)' : '';
      const errorType = result.errorType ? ` [${result.errorType}]` : '';
      console.log(`${status} ${testName}${skipped}${errorType}`);
    });
    
    const allPassed = Object.values(results).every(result => result.success);
    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allPassed ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´'}`);
    
    return results;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new FnsErrorsTest();
  test.runAllTests()
    .then(results => {
      const allPassed = Object.values(results).every(result => result.success);
      process.exit(allPassed ? 0 : 1);
    })
    .catch(error => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
      process.exit(1);
    });
}

module.exports = FnsErrorsTest;
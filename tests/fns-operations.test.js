const axios = require('axios');
const FnsAuthTest = require('./fns-auth.test');

class FnsOperationsTest {
  constructor() {
    this.authTest = new FnsAuthTest();
    this.baseUrl = process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090';
    this.serviceUrl = `${this.baseUrl}/open-api/ais3/KktService/0.1`;
    this.cachedToken = null;
    
    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    this.baseReceiptData = {
      fn: '9287440300090728',
      fd: '77140', 
      fp: '1482926140',
      sum: 120000, // 1200 —Ä—É–±–ª–µ–π
      date: '2019-04-10T14:30:00'
    };
  }

  async getValidToken() {
    if (this.cachedToken) {
      return this.cachedToken;
    }
    
    console.log('üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const authResult = await this.authTest.testAuthentication();
    
    if (!authResult.success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: ${authResult.error}`);
    }
    
    this.cachedToken = authResult.token;
    return this.cachedToken;
  }

  async testOperationType(operationType, operationName, receiptData = null) {
    console.log(`üîÑ === –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operationName} (—Ç–∏–ø ${operationType}) ===`);
    
    const testData = receiptData || {
      ...this.baseReceiptData,
      typeOperation: operationType
    };
    
    console.log(`–î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:`, testData);
    
    try {
      const token = await this.getValidToken();
      
      const soapRequest = `
        <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
          <soap-env:Body>
            <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
              <ns0:Message>
                <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/KktTicketService/types/1.0">
                  <tns:GetTicketInfo>
                    <tns:Sum>${testData.sum}</tns:Sum>
                    <tns:Date>${testData.date}</tns:Date>
                    <tns:Fn>${testData.fn}</tns:Fn>
                    <tns:TypeOperation>${testData.typeOperation}</tns:TypeOperation>
                    <tns:FiscalDocumentId>${testData.fd}</tns:FiscalDocumentId>
                    <tns:FiscalSign>${testData.fp}</tns:FiscalSign>
                  </tns:GetTicketInfo>
                  <tns:AuthToken>${token}</tns:AuthToken>
                </tns:GetTicketRequest>
              </ns0:Message>
            </ns0:SendMessageRequest>
          </soap-env:Body>
        </soap-env:Envelope>
      `;

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
      
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
        },
        timeout: 30000,
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
      const messageId = this.parseMessageId(response.data);
      const processingState = this.parseProcessingState(response.data);
      
      if (messageId) {
        console.log(`üéØ ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageId}`);
        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingState}`);
        
        return {
          success: true,
          operationType,
          operationName,
          messageId,
          processingState,
          testData
        };
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è');
        return {
          success: false,
          operationType,
          operationName,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è',
          testData
        };
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
      
      if (error.response) {
        console.log(`üìä –°—Ç–∞—Ç—É—Å HTTP: ${error.response.status}`);
        console.log(`üí¨ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, error.response.data?.substring(0, 200) + '...');
      }
      
      return {
        success: false,
        operationType,
        operationName,
        error: error.message,
        testData
      };
    }
  }

  parseMessageId(xmlResponse) {
    const messageIdMatch = xmlResponse.match(/<.*?MessageId.*?>(.*?)<\/.*?MessageId.*?>/);
    return messageIdMatch ? messageIdMatch[1] : null;
  }

  parseProcessingState(xmlResponse) {
    const stateMatch = xmlResponse.match(/<.*?ProcessingStatus.*?>(.*?)<\/.*?ProcessingStatus.*?>/);
    return stateMatch ? stateMatch[1] : 'UNKNOWN';
  }

  async testSaleOperation() {
    console.log('üí∞ === –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ ===');
    
    const saleData = {
      ...this.baseReceiptData,
      fd: '77141',
      fp: '1482926141',
      sum: 350000, // 3500 —Ä—É–±–ª–µ–π
      typeOperation: 1
    };
    
    return await this.testOperationType(1, '–ü—Ä–æ–¥–∞–∂–∞', saleData);
  }

  async testReturnOperation() {
    console.log('üîÑ === –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ ===');
    
    const returnData = {
      ...this.baseReceiptData,
      fd: '77142',
      fp: '1482926142',
      sum: 180000, // 1800 —Ä—É–±–ª–µ–π
      typeOperation: 2
    };
    
    return await this.testOperationType(2, '–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞', returnData);
  }

  async testExpenseOperation() {
    console.log('üì§ === –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ ===');
    
    const expenseData = {
      ...this.baseReceiptData,
      fd: '77143',
      fp: '1482926143',
      sum: 250000, // 2500 —Ä—É–±–ª–µ–π
      typeOperation: 3
    };
    
    return await this.testOperationType(3, '–†–∞—Å—Ö–æ–¥', expenseData);
  }

  async testExpenseReturnOperation() {
    console.log('üì• === –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ ===');
    
    const expenseReturnData = {
      ...this.baseReceiptData,
      fd: '77144',
      fp: '1482926144',
      sum: 95000, // 950 —Ä—É–±–ª–µ–π
      typeOperation: 4
    };
    
    return await this.testOperationType(4, '–í–æ–∑–≤—Ä–∞—Ç —Ä–∞—Å—Ö–æ–¥–∞', expenseReturnData);
  }

  async testInvalidOperation() {
    console.log('‚ùå === –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ===');
    
    const invalidData = {
      ...this.baseReceiptData,
      fd: '77145',
      fp: '1482926145',
      sum: 100000,
      typeOperation: 99 // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    };
    
    return await this.testOperationType(99, '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è', invalidData);
  }

  async testSequentialOperations() {
    console.log('\nüîÑ === –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ===');
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É, –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–π –∂–µ —Å—É–º–º—ã');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∞
    const saleResult = await this.testOperationType(1, '–ü—Ä–æ–¥–∞–∂–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', {
      ...this.baseReceiptData,
      fd: '77146',
      fp: '1482926146',
      sum: 200000,
      typeOperation: 1
    });
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ó–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—Ç
    const returnResult = await this.testOperationType(2, '–í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', {
      ...this.baseReceiptData,
      fd: '77147',
      fp: '1482926147',
      sum: 200000, // –¢–∞ –∂–µ —Å—É–º–º–∞
      typeOperation: 2
    });
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    console.log(`  –ü—Ä–æ–¥–∞–∂–∞: ${saleResult.success ? '‚úÖ' : '‚ùå'}`);
    console.log(`  –í–æ–∑–≤—Ä–∞—Ç: ${returnResult.success ? '‚úÖ' : '‚ùå'}`);
    
    return {
      sale: saleResult,
      return: returnResult,
      sequenceSuccess: saleResult.success && returnResult.success
    };
  }

  async testDifferentAmounts() {
    console.log('\nüí∏ === –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É–º–º –æ–ø–µ—Ä–∞—Ü–∏–π ===');
    
    const amounts = [
      { sum: 100, name: '1 —Ä—É–±–ª—å' },           // 100 –∫–æ–ø–µ–µ–∫
      { sum: 150000, name: '1500 —Ä—É–±–ª–µ–π' },   // –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞
      { sum: 1000000, name: '10000 —Ä—É–±–ª–µ–π' }, // –ë–æ–ª—å—à–∞—è —Å—É–º–º–∞
      { sum: 999999999, name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞' } // –û—á–µ–Ω—å –±–æ–ª—å—à–∞—è
    ];
    
    const results = [];
    
    for (let i = 0; i < amounts.length; i++) {
      const amount = amounts[i];
      console.log(`üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã: ${amount.name}`);
      
      const result = await this.testOperationType(1, `–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ ${amount.name}`, {
        ...this.baseReceiptData,
        fd: `7714${i}`,
        fp: `148292614${i}`,
        sum: amount.sum,
        typeOperation: 1
      });
      
      results.push({
        ...result,
        amountName: amount.name,
        amount: amount.sum
      });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    return results;
  }

  async runAllTests() {
    console.log('üöÄ === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π FNS ===\n');
    
    try {
      const results = [];
      
      // –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      console.log('üìã === –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π ===');
      results.push(await this.testSaleOperation());
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      results.push(await this.testReturnOperation());
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      results.push(await this.testExpenseOperation());
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      results.push(await this.testExpenseReturnOperation());
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      console.log('\n‚ùå === –¢–µ—Å—Ç –æ—à–∏–±–æ–∫ ===');
      results.push(await this.testInvalidOperation());
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
      const sequenceResult = await this.testSequentialOperations();
      results.push(sequenceResult.sale);
      results.push(sequenceResult.return);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É–º–º
      const amountResults = await this.testDifferentAmounts();
      results.push(...amountResults);
      
      // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log('\nüìä === –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π ===');
      
      let successCount = 0;
      let totalCount = results.length;
      
      const operationStats = {};
      
      results.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        const name = result.operationName || result.amountName || '–û–ø–µ—Ä–∞—Ü–∏—è';
        console.log(`${status} ${name}`);
        
        if (result.success) {
          successCount++;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
        const opType = result.operationType;
        if (opType !== undefined) {
          if (!operationStats[opType]) {
            operationStats[opType] = { success: 0, total: 0 };
          }
          operationStats[opType].total++;
          if (result.success) {
            operationStats[opType].success++;
          }
        }
      });
      
      console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:');
      Object.entries(operationStats).forEach(([type, stats]) => {
        const typeNames = {
          '1': '–ü—Ä–æ–¥–∞–∂–∞',
          '2': '–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞', 
          '3': '–†–∞—Å—Ö–æ–¥',
          '4': '–í–æ–∑–≤—Ä–∞—Ç —Ä–∞—Å—Ö–æ–¥–∞',
          '99': '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'
        };
        const typeName = typeNames[type] || `–¢–∏–ø ${type}`;
        console.log(`  ${typeName}: ${stats.success}/${stats.total}`);
      });
      
      return {
        success: successCount === totalCount,
        passed: successCount,
        total: totalCount,
        operationStats,
        results
      };
      
    } catch (error) {
      console.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = FnsOperationsTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new FnsOperationsTest();
  test.runAllTests()
    .then(summary => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(summary.success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
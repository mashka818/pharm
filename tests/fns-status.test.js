const axios = require('axios');
const jwt = require('jsonwebtoken');

class FnsStatusTest {
  constructor() {
    this.baseUrl = process.env.BACKEND_URL || `http://${process.env.PROD_SERVER_IP || '91.236.198.205'}:${process.env.API_PORT || '4000'}`;
    this.statusEndpoint = `${this.baseUrl}/api/fns/status`;
    this.jwtSecret = process.env.JWT_SECRET || 'gpW7DtMraBcCf4rXXyMmLZ25cMsrjv6z';
    
    // Test request IDs - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–∏ ID –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    this.testRequestIds = [
      'test-request-id-123',
      'test-request-id-456',
      'test-request-id-789',
      'existing-request-id', // –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      'old-request-id-2023'
    ];
    
    this.invalidRequestIds = [
      '',
      'invalid-id',
      'non-existent-request-id',
      '123456789012345678901234567890123456789012345678901234567890', // —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
      'special!@#$%^&*()chars',
      'null',
      'undefined'
    ];
  }

  // Generate JWT token for testing
  generateTestToken(userId = 1) {
    const payload = {
      id: userId,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hour
    };
    
    return jwt.sign(payload, this.jwtSecret);
  }

  async testGetStatusSuccess() {
    console.log('‚úÖ === –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ ===');
    
    const results = [];
    
    for (const requestId of this.testRequestIds) {
      console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ requestId: ${requestId}`);
      
      try {
        const token = this.generateTestToken(1);
        const endpoint = `${this.statusEndpoint}/${requestId}`;
        
        console.log(`üìû –ó–∞–ø—Ä–æ—Å –∫: ${endpoint}`);
        console.log(`üîë –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
        
        const response = await axios.get(endpoint, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000,
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

        if (response.status === 200 && response.data) {
          console.log('‚úÖ –£–°–ü–ï–•: –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
          const expectedFields = ['requestId', 'status', 'createdAt', 'updatedAt'];
          const hasRequiredFields = expectedFields.every(field => 
            response.data.hasOwnProperty(field)
          );
          
          results.push({
            requestId,
            success: true,
            data: response.data,
            hasRequiredFields
          });
        } else {
          console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
          results.push({
            requestId,
            success: false,
            error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞'
          });
        }
        
      } catch (error) {
        if (error.response) {
          console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
          
          // 404 - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö requestId
          if (error.response.status === 404) {
            console.log('‚ÑπÔ∏è 404 –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö requestId');
            results.push({
              requestId,
              success: true, // 404 —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
              notFound: true,
              status: error.response.status
            });
          } else {
            results.push({
              requestId,
              success: false,
              error: error.response.data?.message || error.message,
              status: error.response.status
            });
          }
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
          results.push({
            requestId,
            success: false,
            error: error.message
          });
        }
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–∞: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`);
    
    return {
      success: successCount > 0,
      results,
      successRate: successCount / results.length
    };
  }

  async testGetStatusInvalidIds() {
    console.log('\nüö´ === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ request ID ===');
    
    const results = [];
    
    for (const requestId of this.invalidRequestIds) {
      console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ ID: "${requestId}"`);
      
      try {
        const token = this.generateTestToken(1);
        const endpoint = `${this.statusEndpoint}/${encodeURIComponent(requestId)}`;
        
        const response = await axios.get(endpoint, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000,
        });

        console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π');
        results.push({
          requestId,
          success: false,
          error: '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞'
        });
        
      } catch (error) {
        if (error.response && [400, 404].includes(error.response.status)) {
          console.log(`‚úÖ –£–°–ü–ï–•: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (${error.response.status})`);
          console.log(`üí¨ –û—à–∏–±–∫–∞: ${error.response.data?.message}`);
          
          results.push({
            requestId,
            success: true,
            validationError: error.response.data?.message,
            status: error.response.status
          });
        } else {
          console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
          results.push({
            requestId,
            success: false,
            error: error.message
          });
        }
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    console.log(`\nüìà –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö ID: ${successCount}/${results.length} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);
    
    return {
      success: successCount > 0,
      results,
      successRate: successCount / results.length
    };
  }

  async testGetStatusNoAuth() {
    console.log('\nüîê === –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===');
    
    try {
      const requestId = this.testRequestIds[0];
      const endpoint = `${this.statusEndpoint}/${requestId}`;
      
      const response = await axios.get(endpoint, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return { success: false, error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è' };
      
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        
        return { 
          success: true, 
          authError: true,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testGetStatusInvalidToken() {
    console.log('\nüîê === –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º ===');
    
    try {
      const invalidToken = 'invalid.jwt.token';
      const requestId = this.testRequestIds[0];
      const endpoint = `${this.statusEndpoint}/${requestId}`;
      
      const response = await axios.get(endpoint, {
        headers: {
          'Authorization': `Bearer ${invalidToken}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return { success: false, error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' };
      
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ –£–°–ü–ï–•: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        
        return { 
          success: true, 
          tokenError: true,
          status: error.response.status 
        };
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏');
        return { success: false, error: error.message };
      }
    }
  }

  async testGetStatusResponseStructure() {
    console.log('\nüîç === –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ ===');
    
    try {
      const token = this.generateTestToken(1);
      const requestId = this.testRequestIds[0];
      const endpoint = `${this.statusEndpoint}/${requestId}`;
      
      const response = await axios.get(endpoint, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000,
      });

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      console.log(`üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ ReceiptStatusDto
      const requiredFields = ['requestId', 'status', 'createdAt', 'updatedAt'];
      const optionalFields = ['cashbackAmount', 'cashbackAwarded', 'isValid', 'isReturn', 'isFake', 'customer'];
      
      const hasAllRequired = requiredFields.every(field => 
        response.data.hasOwnProperty(field)
      );
      
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:');
      requiredFields.forEach(field => {
        const hasField = response.data.hasOwnProperty(field);
        console.log(`  ${hasField ? '‚úÖ' : '‚ùå'} ${field}: ${hasField ? '‚úì' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      });
      
      optionalFields.forEach(field => {
        const hasField = response.data.hasOwnProperty(field);
        if (hasField) {
          console.log(`  ‚ÑπÔ∏è ${field}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ)`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
      const validStatuses = ['pending', 'processing', 'success', 'rejected', 'failed'];
      const isValidStatus = validStatuses.includes(response.data.status);
      
      console.log(`üìä –°—Ç–∞—Ç—É—Å "${response.data.status}" –≤–∞–ª–∏–¥–µ–Ω: ${isValidStatus ? '‚úÖ' : '‚ùå'}`);
      
      return {
        success: hasAllRequired && isValidStatus,
        hasAllRequired,
        isValidStatus,
        data: response.data,
        missingFields: requiredFields.filter(field => !response.data.hasOwnProperty(field))
      };
      
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log('‚ÑπÔ∏è 404 –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ID - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ');
        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        
        return {
          success: true,
          notFound: true,
          status: error.response.status
        };
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return { success: false, error: error.message };
      }
    }
  }

  async testGetStatusDifferentUsers() {
    console.log('\nüë• === –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===');
    
    const results = [];
    const requestId = this.testRequestIds[0];
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let userId = 1; userId <= 3; userId++) {
      console.log(`\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      try {
        const token = this.generateTestToken(userId);
        const endpoint = `${this.statusEndpoint}/${requestId}`;
        
        const response = await axios.get(endpoint, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000,
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        console.log(`üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: ${response.data ? '–¥–∞' : '–Ω–µ—Ç'}`);

        results.push({
          userId,
          success: true,
          data: response.data
        });
        
      } catch (error) {
        if (error.response) {
          console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.message || error.response.statusText}`);
          
          results.push({
            userId,
            success: error.response.status === 404, // 404 –æ–∂–∏–¥–∞–µ–º –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            error: error.response.data?.message || error.message,
            status: error.response.status
          });
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
          results.push({
            userId,
            success: false,
            error: error.message
          });
        }
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    console.log(`\nüìà –î–æ—Å—Ç—É–ø —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`);
    
    return {
      success: successCount > 0,
      results,
      successRate: successCount / results.length
    };
  }

  async runAllTests() {
    console.log('üöÄ === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è FNS Status ===\n');
    
    const results = {
      statusSuccess: await this.testGetStatusSuccess(),
      invalidIds: await this.testGetStatusInvalidIds(),
      noAuth: await this.testGetStatusNoAuth(),
      invalidToken: await this.testGetStatusInvalidToken(),
      responseStructure: await this.testGetStatusResponseStructure(),
      differentUsers: await this.testGetStatusDifferentUsers()
    };

    console.log('\nüìä === –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ FNS Status —Ç–µ—Å—Ç–æ–≤ ===');
    
    let passedTests = 0;
    let totalTests = 0;
    
    Object.entries(results).forEach(([testName, result]) => {
      totalTests++;
      const status = result.success ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
      console.log(`${status} | ${testName}: ${result.error || result.message || 'OK'}`);
      if (result.success) passedTests++;
    });
    
    console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
    
    return {
      passed: passedTests,
      total: totalTests,
      results
    };
  }
}

module.exports = FnsStatusTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new FnsStatusTest();
  test.runAllTests()
    .then(summary => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(summary.passed === summary.total ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
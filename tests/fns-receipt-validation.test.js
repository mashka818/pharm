const axios = require('axios');
const FnsAuthTest = require('./fns-auth.test');

class FnsReceiptValidationTest {
  constructor() {
    this.authTest = new FnsAuthTest();
    this.baseUrl = process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090';
    this.serviceUrl = `${this.baseUrl}/open-api/ais3/KktService/0.1`;
    this.cachedToken = null;
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    this.testReceipts = [
      {
        name: '–û–±—ã—á–Ω—ã–π —á–µ–∫ –∞–ø—Ç–µ–∫–∏',
        data: {
          fn: '9287440300090728',
          fd: '77133', 
          fp: '1482926127',
          sum: 240000, // 2400 —Ä—É–±–ª–µ–π
          date: '2019-04-09T16:38:00',
          typeOperation: 1
        }
      },
      {
        name: '–ß–µ–∫ —Å –º–∞–ª–æ–π —Å—É–º–º–æ–π',
        data: {
          fn: '9287440300090729',
          fd: '77134', 
          fp: '1482926128',
          sum: 5000, // 50 —Ä—É–±–ª–µ–π
          date: '2019-04-09T17:00:00',
          typeOperation: 1
        }
      },
      {
        name: '–ß–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞',
        data: {
          fn: '9287440300090730',
          fd: '77135', 
          fp: '1482926129',
          sum: 150000, // 1500 —Ä—É–±–ª–µ–π
          date: '2019-04-09T18:30:00',
          typeOperation: 2 // –≤–æ–∑–≤—Ä–∞—Ç
        }
      },
      {
        name: '–ö—Ä—É–ø–Ω—ã–π —á–µ–∫',
        data: {
          fn: '9287440300090731',
          fd: '77136', 
          fp: '1482926130',
          sum: 5000000, // 50000 —Ä—É–±–ª–µ–π
          date: '2019-04-10T10:15:00',
          typeOperation: 1
        }
      }
    ];
  }

  async getValidToken() {
    if (this.cachedToken) {
      return this.cachedToken;
    }
    
    console.log('üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const authResult = await this.authTest.testAuthentication();
    
    if (!authResult.success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: ${authResult.error}`);
    }
    
    this.cachedToken = authResult.token;
    return this.cachedToken;
  }

  async validateSingleReceipt(receiptData, receiptName = '–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫') {
    console.log(`üìù === –í–∞–ª–∏–¥–∞—Ü–∏—è: ${receiptName} ===`);
    console.log(`–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:`, receiptData);
    
    try {
      const token = await this.getValidToken();
      
      const soapRequest = `
        <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
          <soap-env:Body>
            <ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
              <ns0:Message>
                <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/KktTicketService/types/1.0">
                  <tns:GetTicketInfo>
                    <tns:Sum>${receiptData.sum}</tns:Sum>
                    <tns:Date>${receiptData.date}</tns:Date>
                    <tns:Fn>${receiptData.fn}</tns:Fn>
                    <tns:TypeOperation>${receiptData.typeOperation}</tns:TypeOperation>
                    <tns:FiscalDocumentId>${receiptData.fd}</tns:FiscalDocumentId>
                    <tns:FiscalSign>${receiptData.fp}</tns:FiscalSign>
                  </tns:GetTicketInfo>
                  <tns:AuthToken>${token}</tns:AuthToken>
                </tns:GetTicketRequest>
              </ns0:Message>
            </ns0:SendMessageRequest>
          </soap-env:Body>
        </soap-env:Envelope>
      `;

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
      
      const response = await axios.post(this.serviceUrl, soapRequest, {
        headers: {
          'Content-Type': 'text/xml;charset=UTF-8',
          'SOAPAction': 'urn:SendMessageRequest',
        },
        timeout: 30000,
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
      const messageId = this.parseMessageId(response.data);
      const processingState = this.parseProcessingState(response.data);
      
      if (messageId) {
        console.log(`üéØ ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageId}`);
        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingState}`);
        
        return {
          success: true,
          messageId,
          processingState,
          receiptData,
          receiptName
        };
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è');
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è',
          receiptData,
          receiptName
        };
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
      
      if (error.response) {
        console.log(`üìä –°—Ç–∞—Ç—É—Å HTTP: ${error.response.status}`);
        console.log(`üí¨ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, error.response.data?.substring(0, 200) + '...');
      }
      
      return {
        success: false,
        error: error.message,
        receiptData,
        receiptName
      };
    }
  }

  parseMessageId(xmlResponse) {
    const messageIdMatch = xmlResponse.match(/<.*?MessageId.*?>(.*?)<\/.*?MessageId.*?>/);
    return messageIdMatch ? messageIdMatch[1] : null;
  }

  parseProcessingState(xmlResponse) {
    const stateMatch = xmlResponse.match(/<.*?ProcessingStatus.*?>(.*?)<\/.*?ProcessingStatus.*?>/);
    return stateMatch ? stateMatch[1] : 'UNKNOWN';
  }

  async testReceiptValidation() {
    console.log('üßæ === –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —á–µ–∫–æ–≤ ===');
    
    const results = [];
    
    for (const receipt of this.testReceipts) {
      const result = await this.validateSingleReceipt(receipt.data, receipt.name);
      results.push(result);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    return results;
  }

  async testEdgeCases() {
    console.log('\nüîç === –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ===');
    
    const edgeCases = [
      {
        name: '–ß–µ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π',
        data: {
          fn: '9287440300090732',
          fd: '1', 
          fp: '1',
          sum: 1, // 1 –∫–æ–ø–µ–π–∫–∞
          date: '2019-04-09T09:00:00',
          typeOperation: 1
        }
      },
      {
        name: '–û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π —á–µ–∫',
        data: {
          fn: '9287440300090733',
          fd: '99999', 
          fp: '999999999',
          sum: 100000,
          date: '2018-01-01T12:00:00', // –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞
          typeOperation: 1
        }
      },
      {
        name: '–ß–µ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
        data: {
          fn: '9999999999999999',
          fd: '999999', 
          fp: '4294967295',
          sum: 99999999, // –ë–æ–ª—å—à–∞—è —Å—É–º–º–∞
          date: '2019-12-31T23:59:59',
          typeOperation: 1
        }
      }
    ];
    
    const results = [];
    
    for (const testCase of edgeCases) {
      const result = await this.validateSingleReceipt(testCase.data, testCase.name);
      results.push(result);
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    return results;
  }

  async testErrorHandling() {
    console.log('\n‚ùå === –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===');
    
    const errorCases = [
      {
        name: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π FN',
        data: {
          fn: 'invalid-fn',
          fd: '77133', 
          fp: '1482926127',
          sum: 240000,
          date: '2019-04-09T16:38:00',
          typeOperation: 1
        }
      },
      {
        name: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞',
        data: {
          fn: '9287440300090728',
          fd: '77133', 
          fp: '1482926127',
          sum: -100,
          date: '2019-04-09T16:38:00',
          typeOperation: 1
        }
      },
      {
        name: '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞',
        data: {
          fn: '9287440300090728',
          fd: '77133', 
          fp: '1482926127',
          sum: 240000,
          date: 'invalid-date',
          typeOperation: 1
        }
      }
    ];
    
    const results = [];
    
    for (const errorCase of errorCases) {
      console.log(`üö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${errorCase.name}`);
      
      try {
        const result = await this.validateSingleReceipt(errorCase.data, errorCase.name);
        
        if (!result.success) {
          console.log('‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
          results.push({ ...result, expectedError: true });
        } else {
          console.log('‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
          results.push({ ...result, unexpected: true });
        }
        
      } catch (error) {
        console.log('‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ');
        results.push({
          success: false,
          error: error.message,
          expectedError: true,
          receiptName: errorCase.name
        });
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    return results;
  }

  async runAllTests() {
    console.log('üöÄ === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ–∫–æ–≤ FNS ===\n');
    
    try {
      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–µ–∫–æ–≤
      const validationResults = await this.testReceiptValidation();
      
      // –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      const edgeResults = await this.testEdgeCases();
      
      // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      const errorResults = await this.testErrorHandling();
      
      // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log('\nüìä === –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===');
      
      const allResults = [...validationResults, ...edgeResults, ...errorResults];
      
      let successCount = 0;
      let totalCount = allResults.length;
      
      allResults.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        const indicator = result.expectedError ? '(–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞)' : '';
        console.log(`${status} ${result.receiptName} ${indicator}`);
        
        if (result.success || result.expectedError) {
          successCount++;
        }
      });
      
      console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
      
      return {
        success: successCount === totalCount,
        passed: successCount,
        total: totalCount,
        results: allResults
      };
      
    } catch (error) {
      console.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = FnsReceiptValidationTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new FnsReceiptValidationTest();
  test.runAllTests()
    .then(summary => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(summary.success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
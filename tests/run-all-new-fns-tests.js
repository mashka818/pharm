const FnsScanQrTest = require('./fns-scan-qr.test');
const FnsVerifyTest = require('./fns-verify.test');
const FnsStatusTest = require('./fns-status.test');
const FnsQueueStatsTest = require('./fns-queue-stats.test');
const FnsDailyCountTest = require('./fns-daily-count.test');

class FnsEndpointsTestRunner {
  constructor() {
    this.tests = {
      scanQr: new FnsScanQrTest(),
      verify: new FnsVerifyTest(),
      status: new FnsStatusTest(),
      queueStats: new FnsQueueStatsTest(),
      dailyCount: new FnsDailyCountTest()
    };
    
    this.results = {};
  }

  async runAllEndpointTests() {
    console.log('üöÄ === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ FNS —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ===\n');
    console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('  ‚Ä¢ POST /fns/scan-qr - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞');
    console.log('  ‚Ä¢ POST /fns/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ (legacy)');
    console.log('  ‚Ä¢ GET /fns/status/:requestId - –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞');
    console.log('  ‚Ä¢ GET /fns/queue/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏');
    console.log('  ‚Ä¢ GET /fns/daily-count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å');
    console.log('\n' + '='.repeat(60) + '\n');

    const startTime = Date.now();

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    for (const [testName, testInstance] of Object.entries(this.tests)) {
      console.log(`üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è: ${testName.toUpperCase()}`);
      console.log('‚îÄ'.repeat(40));
      
      try {
        const result = await testInstance.runAllTests();
        this.results[testName] = {
          ...result,
          testName,
          status: 'completed'
        };
        
        console.log(`‚úÖ –¢–µ—Å—Ç—ã ${testName} –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${result.passed}/${result.total}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ ${testName}:`, error.message);
        this.results[testName] = {
          testName,
          status: 'failed',
          error: error.message,
          passed: 0,
          total: 0
        };
      }
      
      console.log('\n');
    }

    const endTime = Date.now();
    const totalTime = endTime - startTime;

    this.printSummary(totalTime);
    return this.results;
  }

  printSummary(totalTime) {
    console.log('üìä === –û–ë–©–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø FNS –≠–ù–î–ü–û–ò–ù–¢–û–í ===\n');
    
    let totalPassed = 0;
    let totalTests = 0;
    let successfulEndpoints = 0;
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º:');
    Object.entries(this.results).forEach(([testName, result]) => {
      const status = result.status === 'completed' ? 
        (result.passed === result.total ? '‚úÖ' : '‚ö†Ô∏è') : 
        '‚ùå';
      
      const passRate = result.total > 0 ? 
        `${result.passed}/${result.total} (${((result.passed / result.total) * 100).toFixed(1)}%)` : 
        '0/0';
        
      console.log(`  ${status} ${testName.padEnd(12)} | ${passRate.padEnd(20)} | ${result.status}`);
      
      totalPassed += result.passed || 0;
      totalTests += result.total || 0;
      
      if (result.status === 'completed' && result.passed === result.total) {
        successfulEndpoints++;
      }
    });
    
    console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  üéØ –≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${Object.keys(this.results).length}`);
    console.log(`  ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã: ${successfulEndpoints}`);
    console.log(`  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${totalTests > 0 ? ((totalPassed / totalTests) * 100).toFixed(1) : 0}%`);
    console.log(`  üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${totalPassed}/${totalTests}`);
    console.log(`  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(totalTime / 1000).toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    
    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    
    Object.entries(this.results).forEach(([testName, result]) => {
      if (result.status === 'failed') {
        console.log(`  ‚ùå ${testName}: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞`);
      } else if (result.passed < result.total) {
        console.log(`  ‚ö†Ô∏è ${testName}: ${result.total - result.passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏`);
      }
    });
    
    if (successfulEndpoints === Object.keys(this.results).length) {
      console.log('\nüéâ –í–°–ï –≠–ù–î–ü–û–ò–ù–¢–´ –ü–†–û–®–õ–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!');
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
    }
    
    console.log('\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—ã—à–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞');
    console.log('üîß –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('  - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞ (BACKEND_URL)');
    console.log('  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JWT_SECRET');
    console.log('  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é FNS API (FTX_API_URL, FTX_TOKEN)');
  }

  async runSpecificEndpoint(endpointName) {
    if (!this.tests[endpointName]) {
      console.error(`‚ùå –¢–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ "${endpointName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:', Object.keys(this.tests).join(', '));
      return null;
    }
    
    console.log(`üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpointName.toUpperCase()}\n`);
    
    const startTime = Date.now();
    
    try {
      const result = await this.tests[endpointName].runAllTests();
      const endTime = Date.now();
      
      console.log(`\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${((endTime - startTime) / 1000).toFixed(2)} —Å–µ–∫—É–Ω–¥`);
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ ${endpointName}:`, error.message);
      return { passed: 0, total: 0, error: error.message };
    }
  }

  printUsage() {
    console.log('üìñ === –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–ï–°–¢–û–í FNS –≠–ù–î–ü–û–ò–ù–¢–û–í ===\n');
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:');
    console.log('   node tests/run-all-new-fns-tests.js\n');
    console.log('üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:');
    console.log('   node tests/run-all-new-fns-tests.js scanQr');
    console.log('   node tests/run-all-new-fns-tests.js verify');
    console.log('   node tests/run-all-new-fns-tests.js status');
    console.log('   node tests/run-all-new-fns-tests.js queueStats');
    console.log('   node tests/run-all-new-fns-tests.js dailyCount\n');
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('   BACKEND_URL - URL –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:4020)');
    console.log('   JWT_SECRET - –°–µ–∫—Ä–µ—Ç –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤');
    console.log('   FTX_API_URL - URL FNS API');
    console.log('   FTX_TOKEN - –¢–æ–∫–µ–Ω FNS API\n');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  const runner = new FnsEndpointsTestRunner();
  
  // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const specificEndpoint = process.argv[2];
  
  if (specificEndpoint === 'help' || specificEndpoint === '--help' || specificEndpoint === '-h') {
    runner.printUsage();
    return;
  }
  
  try {
    let results;
    
    if (specificEndpoint) {
      // –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
      results = await runner.runSpecificEndpoint(specificEndpoint);
      if (results) {
        const success = results.passed === results.total;
        process.exit(success ? 0 : 1);
      } else {
        process.exit(1);
      }
    } else {
      // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
      results = await runner.runAllEndpointTests();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
      const allPassed = Object.values(results).every(result => 
        result.status === 'completed' && result.passed === result.total
      );
      
      process.exit(allPassed ? 0 : 1);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üß™ === FNS ENDPOINTS AUTOMATED TESTING SUITE ===\n');
  console.log('üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
  console.log('üñ•Ô∏è –°—Ä–µ–¥–∞:', process.env.NODE_ENV || 'development');
  console.log('üåê Backend URL:', process.env.BACKEND_URL || 'http://localhost:4020');
  console.log('\n');
  
  runTests();
}

module.exports = FnsEndpointsTestRunner;
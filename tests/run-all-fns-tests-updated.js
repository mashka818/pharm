#!/usr/bin/env node

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö FNS —Ç–µ—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ)

const FnsAuthTest = require('./fns-auth.test');
const FnsCheckTest = require('./fns-check.test');
const FnsErrorsTest = require('./fns-errors.test');
const FnsIntegrationTest = require('./fns-integration.test');
const FnsReceiptValidationTest = require('./fns-receipt-validation.test');
const FnsOperationsTest = require('./fns-operations.test');

class FnsTestRunner {
  constructor() {
    this.tests = [
      { name: 'auth', class: FnsAuthTest, title: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è FNS' },
      { name: 'check', class: FnsCheckTest, title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤' },
      { name: 'errors', class: FnsErrorsTest, title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫' },
      { name: 'integration', class: FnsIntegrationTest, title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã' },
      { name: 'validation', class: FnsReceiptValidationTest, title: '–í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ–∫–æ–≤' },
      { name: 'operations', class: FnsOperationsTest, title: '–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π' }
    ];
  }

  showHelp() {
    console.log('üìñ === –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–ï–°–¢–û–í FNS (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ===\n');
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:');
    console.log('   node tests/run-all-fns-tests-updated.js\n');
    
    console.log('üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤:');
    this.tests.forEach(test => {
      console.log(`   node tests/run-all-fns-tests-updated.js ${test.name} # ${test.title}`);
    });
    console.log('');
    
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('   FTX_API_URL - URL FNS API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://openapi.nalog.ru:8090)');
    console.log('   FTX_TOKEN - –¢–æ–∫–µ–Ω FNS API');
    console.log('   NODE_ENV - –û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production)\n');
    
    console.log('üìã –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤:');
    console.log('   auth        - –¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å FNS API');
    console.log('   check       - –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤');
    console.log('   errors      - –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫');
    console.log('   integration - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
    console.log('   validation  - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —á–µ–∫–æ–≤');
    console.log('   operations  - –¢–µ—Å—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π (–ø—Ä–æ–¥–∞–∂–∞, –≤–æ–∑–≤—Ä–∞—Ç, etc.)\n');
  }

  async runSpecificTest(testName) {
    const test = this.tests.find(t => t.name === testName);
    
    if (!test) {
      console.log(`‚ùå –¢–µ—Å—Ç "${testName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:', this.tests.map(t => t.name).join(', '));
      return { success: false, error: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    console.log(`üéØ === –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${test.title} ===\n`);
    
    try {
      const testInstance = new test.class();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
      let result;
      if (testInstance.runAllTests) {
        result = await testInstance.runAllTests();
      } else if (testInstance.testAuthentication && test.name === 'auth') {
        result = await testInstance.testAuthentication();
      } else if (testInstance.runTests) {
        result = await testInstance.runTests();
      } else {
        console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥
        const methods = Object.getOwnPropertyNames(Object.getPrototypeOf(testInstance))
          .filter(name => name.startsWith('test') && typeof testInstance[name] === 'function');
        
        if (methods.length > 0) {
          console.log(`üìã –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–æ–¥—ã: ${methods.join(', ')}`);
          console.log(`üöÄ –ó–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞: ${methods[0]}`);
          result = await testInstance[methods[0]]();
        } else {
          throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤');
        }
      }
      
      return {
        testName: test.name,
        testTitle: test.title,
        ...result
      };
      
    } catch (error) {
      console.log(`üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ "${test.title}": ${error.message}`);
      return {
        testName: test.name,
        testTitle: test.title,
        success: false,
        error: error.message
      };
    }
  }

  async runAllTests() {
    console.log('üöÄ === –ó–ê–ü–£–°–ö –í–°–ï–• FNS –¢–ï–°–¢–û–í (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ===\n');
    console.log('üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
    console.log('üñ•Ô∏è –°—Ä–µ–¥–∞:', process.env.NODE_ENV || 'development');
    console.log('üåê FNS API URL:', process.env.FTX_API_URL || 'https://openapi.nalog.ru:8090');
    console.log('üîë FNS Token:', process.env.FTX_TOKEN ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log('\n');

    console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏:');
    this.tests.forEach(test => {
      console.log(`  ‚Ä¢ ${test.name.padEnd(12)} - ${test.title}`);
    });
    console.log('\n============================================================\n');

    const results = [];
    let totalPassed = 0;
    let totalTests = 0;

    for (const test of this.tests) {
      const startTime = Date.now();
      
      console.log(`üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è: ${test.name.toUpperCase()}`);
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      
      const result = await this.runSpecificTest(test.name);
      
      const duration = (Date.now() - startTime) / 1000;
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥\n`);
      
      results.push({
        ...result,
        duration
      });
      
      if (result.success) {
        totalPassed += (result.passed || 1);
        totalTests += (result.total || 1);
        console.log(`‚úÖ –¢–µ—Å—Ç—ã ${test.name} –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${result.passed || 1}/${result.total || 1}\n`);
      } else {
        totalTests += 1;
        console.log(`‚ùå –¢–µ—Å—Ç—ã ${test.name} –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: ${result.error}\n`);
      }
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    this.printSummary(results, totalPassed, totalTests);
    
    return {
      success: totalPassed === totalTests,
      passed: totalPassed,
      total: totalTests,
      results
    };
  }

  printSummary(results, totalPassed, totalTests) {
    console.log('üìä === –û–ë–©–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø FNS ===\n');

    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º:');
    results.forEach(result => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      const percentage = result.total ? ((result.passed / result.total) * 100).toFixed(1) : 'N/A';
      const testInfo = result.total ? `${result.passed}/${result.total} (${percentage}%)` : 'N/A';
      const duration = result.duration ? `${result.duration.toFixed(2)}s` : 'N/A';
      
      console.log(`  ${status} ${result.testName.padEnd(12)} | ${testInfo.padEnd(15)} | ${duration.padStart(8)} | ${result.testTitle}`);
    });

    console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  üéØ –ú–æ–¥—É–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${results.length}`);
    console.log(`  ‚úÖ –ú–æ–¥—É–ª–µ–π –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã: ${results.filter(r => r.success).length}`);
    console.log(`  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${totalTests > 0 ? ((totalPassed / totalTests) * 100).toFixed(1) : 0}%`);
    console.log(`  üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${totalPassed}/${totalTests}`);
    console.log(`  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${results.reduce((sum, r) => sum + (r.duration || 0), 0).toFixed(2)} —Å–µ–∫—É–Ω–¥`);

    if (totalPassed === totalTests) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
      
      const failedTests = results.filter(r => !r.success);
      if (failedTests.length > 0) {
        console.log('\nüìã –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
        failedTests.forEach(test => {
          console.log(`  ‚ùå ${test.testName}: ${test.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        });
      }
    }

    console.log('\nüìÑ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ');
    console.log('üîß –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('  - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FNS API (https://openapi.nalog.ru:8090)');
    console.log('  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å FTX_TOKEN');
    console.log('  - –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ñ–∞–π—Ä–≤–æ–ª');
    console.log('  - –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ FNS API');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function main() {
  const runner = new FnsTestRunner();
  const args = process.argv.slice(2);

  if (args.length === 0) {
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    const summary = await runner.runAllTests();
    process.exit(summary.success ? 0 : 1);
  } else if (args[0] === 'help' || args[0] === '--help' || args[0] === '-h') {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    runner.showHelp();
    process.exit(0);
  } else {
    // –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const testName = args[0].toLowerCase();
    const result = await runner.runSpecificTest(testName);
    
    console.log(`\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testName} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    process.exit(result.success ? 0 : 1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = FnsTestRunner;
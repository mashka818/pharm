
 
Оглавление
Лист регистрации изменений	3
Комплект поставки	4
1	Открытые SOAP API	4
2	Определения	4
3	Порядок взаимодействия с Открытыми SOAP API	4
4	Сервис Аутентификации	5
5	Асинхронный сервис сообщений	5
5.1	Порядок контроля доступа при вызове методов асинхронного сервиса	5
5.2	Вызов асинхронного сервиса	6
5.2.1	Метод отправки сообщения (SendMessage)	6
5.2.2	Метод получения сообщения (GetMessage)	8
5.2.3	Метод массового получения сообщений (GetMessages)	9
5.3	Правила обработки ошибок	11
5.3.1	Обработка ошибок с элементом detail на уровне протокола SOAP	11
5.3.2	Обработка ошибок на уровне протокола НТТP	11
6	Синхронный сервис сообщений	12
7	Правила именования и организации элементов в схемах сервисов	13
8	Правила подписания сообщений	13
8.1	Требования к сертификату подписи и сертификату корневого ЦС	14
8.2	Правило именования сертификатов	14
9	Сервисы работы с файлами	14
9.1	Сервис для загрузки файлов на сервер	14
9.2	Сервис скачивания файлов	15
10	Примеры реализации клиентов Открытых SOAP API на Java	15

 
Лист регистрации изменений

Версия документа	Дата изменения	Список изменений версии
2.0.2	24.01.2020	1. Добавлен раздел «Лист регистрации изменений»
2. Актуализирован раздел «Комплект поставки»
3. Добавлен раздел «1 Определения»
4. Добавлен раздел «2.1 Правила формирования и требования к токену пользователя ВП (FNS-OpenApi-UserToken)»
5. Исправлена нумерация подразделов в разделе «4	 Правила подписания сообщений»
6. Незначительные изменения форматирования документа
2.0.3	05.02.2020	1. Актуализирован раздел «Комплект поставки», добавлены пути к wsdl
2. Изменен раздел «3	Открытые API»
2.0.4	22.01.2020	Актуализированы примеры в разделах:
3.1 Асинхронный сервис сообщений.
3.2 Синхронный сервис сообщений.
Добавлены разделы с описанием правил обработки ошибок.
Актуализирована информация по формату передаваемых ссылок на файлы в элементе FileLinks.
Дополнена информация в раздел общего описания Открытых API.
Дополнена информации о типе возвращаемых ошибок, при обращении к методу SendMessageRequest.
2.0.5	20.12.2022	1. Изменения в структуре документа
2. Добавлен «Перечень ошибок Открытых SOAP API и их описание»
2.0.6	22.11.2023	1. Заголовок FNS-OpenApi-UserToken объявлен как устаревший (deprecated). Устанавливать заголовок в исходящих запросах к сервису не требуется.
2. Обновлена сигнатура методов: GetMessageResponse, GetMessagesResponse. 
3. Обновлён «Перечень ошибок Открытых SOAP API и их описание»
2.0.7	01.12.2024	1. Обновлена сигнатура метода SendMessgeResponse.
2. Обновлён документ: «Перечень ошибок Открытых SOAP API и их описание».

 
Комплект поставки
1.	doc/Описание интерфейсов Открытых API (Потребитель).docx
2.	doc/Описание требований к сертификату и процедуры их проверки.docx
3.	doc/Примеры запросов (Потребитель).docx
4.	doc/Описание сервиса Аутентификации Открытых API.docx
5.	doc/Перечень ошибок Открытых SOAP API и их описание.docx
6.	Java/soap-client - примеры реализации клиентов открытых API на Java (подробнее см. Java/soap-client/README.md)
7.	Java/soap-client/wsdl/OpenApiMessageConsumerService-v0.1.wsdl – wsdl синхронного сервиса Потребителя
8.	Java/soap-client/wsdl/ OpenApiAsyncMessageConsumerService-v0.1.wsdl – wsdl асинхронного сервиса Потребителя
1	Открытые SOAP API
Открытые API построены на основе контрактов данных и предназначены для предоставления внешним приложениям, зарегистрированным в ФНС доступа к публичным сервисам ФНС. 
Открытые SOAP API Потребителя представлены двумя типами сервисов:
1.	Синхронным сервисом сообщений – Сервис Аутентификации (см. OpenApiMessageConsumerService-v0.1.wsdl)
2.	Асинхронным сервисом сообщений (см. OpenApiAsyncMessageConsumerService-v0.1.wsdl)
В описании интерфейсов Открытых SOAP API раскрыты основные принципы взаимодействия с Открытыми API. Описание взаимодействия с конкретными сервисами, публикуемыми через Открытые API, описываются в рамках отдельных документов (например, документ описания интерфейса сервиса аутентификации).
2	Определения
Внешний пользователь (приложение) - это внешнее приложение, зарегистрированное в ФНС, которое направляет запросы к Открытым API, для получения данных от публичных сервисов ФНС (далее ВП).
3	Порядок взаимодействия с Открытыми SOAP API
1.	ФНС предоставляет доступ к Открытым API путем выдачи мастер-токена, и адресов сервисов (endpoint) к которым предоставляется доступ.
2.	ВП, пользуясь синхронным сервисом сообщений, на предоставленный ФНС адрес сервиса аутентификации направляет Soap запрос, передавая полученный мастер-токен. В ответ возвращается временный токен и срок его действия. По истечению срока действия, временный токен необходимо обновить, направив повторный запрос.
3.	ВП после получения временного токена направляет Soap запрос на предоставленный ФНС адрес сервиса. К запросу необходимо добавить заголовки:
•	FNS-OpenApi-Token: 'временный_токен_выданный_сервисом_аутентификации',
Описание заголовка FNS-OpenApi-Token см. в разделе 4.
4	Сервис Аутентификации
Сервис предназначен для аутентификации внешних приложений (ВП) в Открытых SOAP API по мастер-токену, выданному ВП при регистрации в ФНС. Сервис аутентификации предоставляет временный токен, необходимый при вызове методов сервисов, к которым предоставлен доступ для данного ВП. 
Описание сервиса Аутентификации предоставлено в документе «Описание сервиса Аутентификации Открытых API.docx».
5	Асинхронный сервис сообщений
Асинхронный сервис сообщений описан OpenApiAsyncMessageConsumerService-v0.1.wsdl.
Пример soap-клиента на Java: soap-client/consumer-async-service-client
Асинхронный сервис сообщений предоставляет 3 метода:
1.	SendMessage – метод отправки сообщения
2.	GetMessage - метод получения сообщения
3.	GetMessages – метод массового получения сообщений
При обращении ВП к асинхронному сервису, на стороне Открытых SOAP API выполняются проверки в определенной последовательности. В случае, если проверка вернула отрицательный результат, то последующие проверки не выполняются и возвращается ответ с ошибкой. 
5.1	Порядок контроля доступа при вызове методов асинхронного сервиса 
В таблице представлен перечень проверок для методов SendMessage, GetMessage, GetMessages.
	SendMessage	GetMessage	GetMessages

1

	Проверка ip-адреса ВП. В случае, если вызов метода производится с ip-адреса ВП, которого нет в списке разрешенных, Открытые SOAP API вернут ошибку: «Доступ к сервису для переданного IP, запрещен»

2




	Проверка сессионного токена ВП. Из заголовка FNS-OpenApi-Token запроса 
извлекается значение сессионного токена, который проверяется по списку 
актуальных сессионных токенов, который ВП должно было предварительно 
получить, вызвав Сервис Аутентификации.  В случае, если переданный 
сессионный токен не найден в списке актуальных сессионных токенов, сервис 
возвращает ошибку «Доступ к сервису для token запрещен».




3




	Проверка лимита по ВП зарегистрированному в Открытых API. Лимит задается в формате целого положительного числа, администратором Открытых API. В случае превышения лимита, возвращается ошибка «Превышен общий дневной лимит запросов, приложением значение app-id»	Проверка наличия ответа на запрос. В случае, если метод GetMessage вызывается с MessageId, который не был получен путем вызова метода SendMessage, или если после вызова метода SendMessage прошло время более ожидаемого (параметр настраиваемый в конфигурации Открытых API), метод GetMessage вернет ошибку: «По переданному MessageId: значение m-Id сообщение не найдено»

Если пользователь превысит количество запросов метода в единицу времени (1 сек) по уникальному MessageID, сервис вернёт ошибку: «Превышено количество запросов метода GetMessage по уникальному MessageID. Повторите запрос позже.»
	Проверка ограничения на количество сообщений, которые могут быть переданы в одном запросе на получение сообщений (параметр, настраиваемый в конфигурации Открытых API). В случае превышения ограничения выдается сообщение об ошибке «В запросе было передано не допустимое количество messageId».

Если пользователь превысит количество запросов метода в единицу времени (1 мин.), сервис вернёт ошибку: «Превышено количество запросов метода GetMessages. Повторите запрос позже.»

4




	Проверка лимита, по методу сервиса ВП. Лимит задается в формате целого положительного числа. В случае превышения лимита, возвращается ошибка «Превышен лимит 'Запросов в день' метода наименование вызываемого метода, сервиса название сервиса».
	
Открытые API произведут приращение счётчиков: на шагах 3, 4. Если ВП, проигнорирует ошибку о превышении лимита на метод сервиса и продолжит передачу запросов, то, возникнет ситуация, когда приложение полностью исчерпает суточный лимит.
5.2	Вызов асинхронного сервиса
Допустимый порядок вызова методов: SendMessage -> GetMessage (GetMessages).
В каждом методе должны присутствовать заголовки:
Наименование	Тип	Расположение	Наличие в запросе	Описание
FNS-OpenApi-Token	String	Header	обязательно	Временный токен, полученный от сервиса аутентификации
Content-Type	text/xml;charset=UTF-8	Header	обязательно	Обязательное использование кодировки UTF-8

5.2.1	Метод отправки сообщения (SendMessage)
Метод отправки сообщения предназначен для отправки xml сообщения в соответствии с определенной для конкретного сервиса схемой.
Сигнатура метода:
SendMessageResponse SendMessage(SendMessageRequest request) throws AuthenticationException, FileNotFoundException
Пример сообщения SendMessageRequest:

<ns0:SendMessageRequest xmlns:ns0="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
			<ns0:Message>
				<ns1:GetNewlyUnboundTaxpayersRequest xmlns:ns1="urn://x-artefacts-gnivc-ru/ais3/SMZ/SmzPartnersIntegrationService/types/1.0">
					…
				</ns1:GetNewlyUnboundTaxpayersRequest>
			</ns0:Message>
			<ns0:FileLinks>1/test1</ns0:FileLinks>
			<ns0:FileLinks>2/test2</ns0:FileLinks>
</ns0:SendMessageRequest>


SendMessageRequest – запрос, содержащий элементы:
•	Message (сообщение), которое позволяет содержать любой xml с обязательным указанием схемы, отличной от схемы, описывающей данный сервис, например:

<GetNewlyUnboundTaxpayersResponse xmlns="urn://x-artefacts-gnivc-ru/ais3/SMZ/SmzPartnersIntegrationService/types/1.0">
…
</GetNewlyUnboundTaxpayersResponse>


•	FileLinks (необязательный параметр, список ссылок на файлы). Файлы загружаются при помощи сервиса загрузки файлов. В случае успешной загрузки, сервис передает ссылку на загруженный файл клиенту. Клиент должен поместить ссылку в неизменном виде в параметр FileLinks. Количество ссылок в одном сообщении SendMessageRequest задается на уровне сервиса.
Ссылка на файл не должна содержать специальные символы: ‘?’, ‘|’. При попытке передать ссылку с не допустимыми символами, сервис вернет ошибку: «FileNotFoundFault». 
SendMessageResponse – ответ, содержащий единственный элемент MessageId – идентификатор сообщения, присвоенный запросу. Значение MessageId необходимо сохранить для дальнейшего обращения за ответом.
Пример сообщения SendMessageResponse:

<SendMessageResponse xmlns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
         <MessageId>89216792-1fab-4fb5-81ce-8dda34f17425</MessageId>
</SendMessageResponse>


 
В результате вызова, метод может вернуть следующие исключения:
1.	AuthenticationException, указывающее на то что были переданы неверные аутентификационные реквизиты, либо что закончилось время их действия. 
2.	FileNotFoundException - в запросе содержится некорректная ссылка на файл.
3.	SOAPFaultException – данный тип исключения не предполагает наличия обработки программной логикой, сигнализирует о наличии проблем на сервере, или о несоблюдении правил клиентским кодом.
4.	RateLimitingFault (код 429) - пользователь превысил количество запросов метода в единицу времени (1 сек). Количество запросов в единицу времени, определяется по AppID пользователя. 
5.2.2	Метод получения сообщения (GetMessage)
Метод получения сообщения предназначен для получения xml сообщения в соответствии с определенной для конкретного сервиса схемой.
Сигнатура метода:
GetMessageResponse GetMessage(GetMessageRequest request) throws AuthenticationException, MessageNotFoundException, RateLimitingFault  где
GetMessageRequest – запрос, содержащий единственный элемент MessageId – идентификатор сообщения, присвоенный запросу, который требуется передать для получения ответа.
GetMessageResponse – ответ, содержащий 3 элемента ProcessingStatus – статус выполнения запроса, Message - сообщение, содержит любой xml с обязательным указанием схемы, FileLinks – список ссылок на файлы, которые должен скачать клиент при помощи сервиса скачивания файлов. FileLinks необязательный элемент в сообщении GetMessagesResponse. 
ProcessingStatus – перечисление: PROCESSING – запрос обрабатывается, COMPLETED – обработка запроса завершена.
Элемент Message возвращается, когда ProcessingStatus равен COMPLETED.
Пример:

<GetMessageResponse xmlns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
         <ProcessingStatus>COMPLETED</ProcessingStatus>
         <Message>
            <GetNewlyUnboundTaxpayersResponse xmlns="urn://x-artefacts-gnivc-ru/ais3/SMZ/SmzPartnersIntegrationService/types/1.0">
	…
            </GetNewlyUnboundTaxpayersResponse>
         </Message>
</GetMessageResponse>


Пример сообщения GetMessageResponse, с элементом FileLinks. Следует учитывать, что элемент FileLinks будет в ответе только в том случае, когда ProcessingStatus равен COMPLETED.


<GetMessageResponse xmlns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
         <ProcessingStatus>COMPLETED</ProcessingStatus>
         <Message>
            <GetNewlyUnboundTaxpayersResponse xmlns="urn://x-artefacts-gnivc-ru/ais3/SMZ/SmzPartnersIntegrationService/types/1.0">
	…
            </GetNewlyUnboundTaxpayersResponse>
         </Message>
<FileLinks>1/test1</FileLinks>
<FileLinks>2/test2</FileLinks>
</GetMessageResponse>

В результате вызова, метод может вернуть следующие исключения:
1.	AuthenticationException, указывающее на то что были переданы неверные аутентификационные реквизиты, либо что закончилось время их действия. 
2.	MessageNotFoundException – возникает в результате вызова метода GetMessage по истечении установленного времени.
3.	RateLimitingFault (код 429) - пользователь превысил количество запросов метода в единицу времени (1 сек) по уникальному MessageID.

5.2.2.1	Правило работы метода GetMessage
В случае получения ответа GetMessageResponse со статусом ProcessingStatus- PROCESSING, необходимо повторно отправлять запрос GetMessageRequest пока не будет получен ответ со статусом COMPLETED. 
Частота запросов GetMessageRequest регламентирована и не должна превышать установленных ограничений. Счётчик запросов ассоциирован со значением MessageID из запроса GetMessageRequest. 

Метод сервиса	Количество запросов/секунду	Количество запросов/минуту	
GetMessageRequest	1	12	

5.2.3	Метод массового получения сообщений (GetMessages)
Метод предназначен для получения списка сообщений, так, как если бы они запрашивались по отдельности при помощи метода GetMessage (см. 6.2.2).
Сигнатура метода:
GetMessagesResponse getMessages(GetMessagesRequest parameters) throws AuthenticationException
RateLimitingFault, где: 
GetMessagesRequest – запрос, содержащий: MessageId – идентификатор сообщения, присвоенный запросу. UserToken, произвольное текстовое значение, длинна значение не должно нарушать WSDL-контракт сервиса. В последующих релизах свойство UserToken будет удалён из контракта сервиса.
GetMessagesResponse – ответ содержит список из элементов Messages. Содержимое элементов Messages полностью повторяет содержимое элемента GetMessageResponse (см. 6.2.2)
Пример сообщения GetMessagesRequest:

<GetMessagesRequest>
          <Expressions>
            <MessageId>940c273f-54e2-4339-b6b6-823e61ea3fa1</MessageId>
            <UserToken>UserToken1</UserToken>
         </Expressions>
         <Expressions><MessageId>e298abce-0b08-4630-ad86-ee94a16f4b53</MessageId>
             <UserToken>UserToken1</UserToken>
         </Expressions>
</GetMessagesRequest>


Пример сообщения GetMessagesResponse:

<GetMessagesResponse xmlns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
         <Messages>
            <MessageId>940c273f-54e2-4339-b6b6-823e61ea3fa1</MessageId>
            <Result>
               <ProcessingStatus>COMPLETED</ProcessingStatus>
               <Message>
                  <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc ru/ais3/kkt/KktTicketService/types/1.0">
                     …
                  </tns:GetTicketRequest>
               </Message>
            </Result>
         </Messages>
         <Messages>
            <MessageId>e298abce-0b08-4630-ad86-ee94a16f4b53</MessageId>
<Result>
               <ProcessingStatus>COMPLETED</ProcessingStatus>
               <Message>
                  <tns:GetTicketRequest xmlns:tns="urn://x-artefacts-gnivc ru/ais3/kkt/KktTicketService/types/1.0">
                     …
                  </tns:GetTicketRequest>
               </Message>
<FileLinks>test/test1</FileLinks>
<FileLinks>test/test2</FileLinks>
            </Result>
         </Messages>
      </GetMessagesResponse>

Размер списка Expressions в запросе GetMessagesRequest устанавливается на стороне сервиса. В случае превышения максимального количества MessageId в одном сообщении, ответ будет содержать SoapFault с текстом – “В запросе было передано недопустимое количество messageId”.
 

5.2.3.1	Правило вызова метода GetMessages
Частота запросов GetMessagesRequest регламентирована и не должна превышать установленного ограничения. Счётчик запросов ассоциирован с авторизационными данными партнёра (внешней системы).

Метод сервиса	Количество запросов/секунду	Количество запросов/минуту	
GetMessagesRequest	-	5	

5.3	Правила обработки ошибок
Полный перечень ошибок возвращаемый Открытыми SOAP API приложен в документе: «Перечень ошибок Открытых SOAP API и их описание.docx»
5.3.1	Обработка ошибок с элементом detail на уровне протокола SOAP
В рамках стандартного подхода взаимодействия по протоколу SOAP для ошибок, которые объявлены в сигнатуре вызываемого метода, введен элемент detail. В таблице приводится наименование типа ошибки из элемента detail, вызываемый метод и краткое описание причины возникновения ошибки.
Значение в элементе detail	Метод сервиса	Описание
MessageNotFoundFault	GetMessageRequest;
GetMessagesRequest	Не удалось найти сообщение, по переданному значению MessageId.
AuthenticationFault	GetMessagesRequest;
GetMessageRequest;
SendMessageRequest	Отказ в доступе к сервису, по преданному значению сессионного токена.
FileNotFoundFault	SendMessageRequest	Не удалось получить файл, по ссылке из элемента FileLinks.
RateLimitingFault	SendMessageRequest;
GetMessageRequest;
GetMessagesRequest;	Превышение количество запросов, в единицу времени. Вложенный элемент errorCode элемента RateLimitingFault, содержит цифровой код ошибки: 429, который соответствует HTTP-коду ошибки «429 - Too Many Requests»
MessagesNotFoundFault	GetMessagesRequest	Переданный список MessageID из запроса GetMessagesRequest, не актуален на данный момент времени. Результат не может быть получен. 

5.3.2	Обработка ошибок на уровне протокола НТТP
На уровне протокола HTTP сервисы Открытых API могут вернуть ошибку о превышении максимальной частоты опроса сервисов потребителем.
Код ошибки: 429
Текст ошибки: Too many requests.
Тело ответа содержит HTML документ, не предназначенный для программной обработки на стороне потребителя.  Для обработки ошибки необходимо использовать информацию из заголовков HTTP. 
6	Синхронный сервис сообщений
Синхронный сервис сообщений описан OpenApiAsyncMessageConsumerService-v0.1.wsdl.  
Пример soap-клиента на Java: soap-client/consumer-auth-service-client
При обращении ВП к синхронному сервису, на стороне Открытых SOAP API выполняется проверка ip-адреса ВП. В случае, если вызов метода производится с ip-адреса ВП, которого нет в списке разрешенных, Открытые SOAP API вернут ошибку: «Доступ к сервису для переданного IP, запрещен».
Синхронный сервис сообщений предоставляет 1 метод:
1.	GetMessage - метод получения сообщения
Сигнатура метода:
GetMessageResponse GetMessage(GetMessageRequest request), где 
GetMessageRequest – запрос, содержащий единственный элемент Message - сообщение, содержит любой xml с обязательным указанием схемы. Например,

<tns:AuthRequest xmlns:tns="urn://x-artefacts-gnivc-ru/ais3/kkt/AuthService/types/1.0">
	<tns:AuthAppInfo>
		<tns:MasterToken>MASTER_TOKEN_ISSUED_BY_FNS</tns:MasterToken>
	</tns:AuthAppInfo>
</tns:AuthRequest>


GetMessageResponse – ответ, содержащий единственный элемент Message - сообщение, содержит любой xml с обязательным указанием схемы. Например,


<AuthResponse xmlns:ns3="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageProviderService/types/1.0" xmlns:ns2="urn://x-artefacts-gnivc-ru/ais3/kkt/AuthService/types/1.0" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn://x-artefacts-gnivc-ru/ais3/kkt/AuthService/types/1.0">
               <ns2:Result>
                  <ns2:Token>63c6bed44d664414ad60e2580113229f</ns2:Token>
                  <ns2:ExpireTime>2021-01-24T23:29:17.791+03:00</ns2:ExpireTime>
               </ns2:Result>
</AuthResponse>

Сервис может вернуть исключение, типа SOAPFault. Данный тип исключения не предполагает наличия обработки программной логикой, сигнализирует о наличии проблем на сервере, или о несоблюдении правил клиентским кодом.
Полный перечень ошибок возвращаемый Открытыми SOAP API приложен в документе: «Перечень ошибок Открытых SOAP API и их описание.docx»
7	Правила именования и организации элементов в схемах сервисов
Правила именования элементов в схемах сервисов, если не оговорено дополнительно, соответствуют следующим правилам:
1.	Элементы схемы вида MethodRequest предназначены для передачи в качестве запросов к соответствующим методам.
2.	Элементы схемы вида MethodResponse предназначены для получения в качестве ответа от соответствующего метода. MethodResponse содержит 2 взаимоисключающих элемента Result и Fault. Result – возвращается в случае успешного вызова метода, Fault – в случае наличия ошибок.
8	Правила подписания сообщений
В зависимости от бизнес-требований элементы xsd-схем, используемые в качестве запросов, могут требовать наличия электронно-цифровой подписи. Для подписания используется стандарт, определенный в рекомендациях W3C по синтаксису и обработке прикрепленной подписи XML, с использованием алгоритма цифровой подписи ГОСТ Р 34.10-2012. По данному стандарту должно быть подписано содержимое вложенное в элемент Message.
1 Пример положения подписываемого элемента

<soap:Envelope 
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
	xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
	xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" 
	xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
	...
	<soap:Body>
		<SendMessageRequest xmlns="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0">
			<Message>
				<ns:PostRegistrationRequest xmlns:ns="urn://x-artefacts-gnivc-ru/ais3/SMZ/SmzPartnersIntegrationService/types/1.0" wsu:Id="PostRegistrationRequest">...</ns:PostRegistrationRequest>
			</Message>
		</SendMessageRequest>
	</soap:Body>
</soap:Envelope>

Открытые API проверяют подпись в сообщении (только для методов требующих такую проверку), и в случае, если подпись не валидна, клиенту передается ошибка. 
2 Пример ошибки проверки ЭЦП

HTTP/1.1 500 Server Error
Date: Fri, 22 Jan 2021 05:41:54 GMT
Content-Type: text/xml; charset=UTF-8
Transfer-Encoding: chunked
Server: Jetty(9.2.21.v20170120)

<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>Значение ЭЦП не прошло проверку.</faultstring>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>

Для проверки подписи используется КриптоПро JCP / JCP 2.0. Изменения, связанные с подписанием, не требуют изменения логики уже подключенных к Открытым SOAP API ВП до тех пор, пока метод сервиса не будет помечен как требующий подписания.
Пример клиента на Java: soap-clien/consumer-async-service-signature-client
8.1	Требования к сертификату подписи и сертификату корневого ЦС
Требования к сертификату подписи и сертификату корневого ЦС описано в документе «Описание требований к сертификату и процедуры их проверки».
8.2	Правило именования сертификатов
Правило именования файлов сертификатов описано в документе «Описание требований к сертификату и процедуры их проверки».
9	Сервисы работы с файлами
Сервисы предназначены для передачи/получения файлов от клиента асинхронного сервиса потребителя. Максимальный размер передаваемого файла устанавливается на уровне сервиса. Значение может быть согласовано с клиентом и изменено на уровне сервиса. 
Примеры клиентов на Java:
1.	Загрузка файлов soap-client/upload-downloadFile-service-client, класс HttpsClientUploadFile.
2.	Скачивание файлов soap-client/upload-downloadFile-service-client, класс HttpsClientDownloadFile.
9.1	Сервис для загрузки файлов на сервер
Передача файлов выполняется путем передачи специализированного post-запроса на url-адрес сервиса. Передаваемый файл упаковывается в тело запроса и передается в бинарном формате. Для работы с сервисом необходимо реализовать http-клиента (раздел 10)
В случае успешной загрузки сервис вернет сообщение с кодом состояния HTTP -  200. В теле ответа будет находится ссылка на загруженный файл в виде:
 УникальныйИдентификаторЗапроса/названиеЗагруженногоФайла, где
o	УникальныйИдентификаторЗапроса – буквенно-числовое значение в формате UUID, формируется сервисом и идентифицирует запрос на загрузку файла.
o	названиеЗагружаемогоФайла – значение устанавливается клиентом в теле исходящего запроса, например средствами библиотеки org.apache.http.entity.mime (см. код примера по реализации клиента загрузки файлов: проект upload-downloadFile-service-client, класс HttpsClientUploadFile).
После получения ссылки, клиенту необходимо установить полученное значение в параметр FileLinks, который находится в запросе SendMessageRequest (раздел 6.2.1)
9.2	Сервис скачивания файлов
Скачивание файлов производится в следующей последовательности:
1. Клиент после приема сообщений GetMessageResponse (раздел 6.2.2) или GetMessagesResponse (раздел 6.2.3) обнаружил ссылки на файлы в параметре FileLinks.
2. Количество ссылок прямо пропорционально количеству запросов, которые должен сформировать и отправить клиент для получения файлов. 
Формат post-запроса для скачивания файла по ссылке: URL-адрес-сервиса?ссылкаНаФайл.
Пример post-запроса: 
https://server:8443/open-api/Example/download?940c273f-54e2-4339-b6b6-823e61ea3fa1/testFile
Сервис передает файл и его наименование в теле ответа в бинарном формате. В случае успешной передачи, сервис вернет сообщение с кодом состояния HTTP -  200.
10	Примеры реализации клиентов Открытых SOAP API на Java
Java/soap-client – проект содержит примеры реализации клиентов для сервисов Открытых API. В корне проекта находится README с описанием структуры проекта. 
Реализация клиентов разложена по отдельным модулям в структуре проекта soap-client. В каждом модуле находится README с описанием клиента.


const axios = require('axios');

const BASE_URL = 'http://localhost:4000/api';

// –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
const TEST_CUSTOMER = {
  name: '–¢–µ—Å—Ç–æ–≤—ã–π',
  surname: '–ö–ª–∏–µ–Ω—Ç',
  patronymic: '–§–∞—Ä–º–≤–∏–∂–Ω',
  email: 'test.customer@pharm-vision.ru',
  password: 'testpassword123',
  address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, 123',
  promotionId: 'test-promotion-id' // –ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ü–∏—é
};

async function createTestCustomer() {
  console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...\n');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...');
    console.log(`   Email: ${TEST_CUSTOMER.email}`);
    console.log(`   –ò–º—è: ${TEST_CUSTOMER.name} ${TEST_CUSTOMER.surname}`);

    const response = await axios.post(`${BASE_URL}/customers`, TEST_CUSTOMER);
    
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    console.log('\nüí° –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email, –∫–ª–∏–µ–Ω—Ç —Å–º–æ–∂–µ—Ç:');
    console.log('   ‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã —á–µ–∫–æ–≤');
    console.log('   ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∫–µ—à–±–µ–∫ –∑–∞ –ø–æ–∫—É–ø–∫–∏');
    console.log('   ‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π');

    return response.data;

  } catch (error) {
    if (error.response?.status === 409) {
      console.log('‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
      try {
        console.log('\nüîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...');
        const loginResponse = await axios.post(`${BASE_URL}/auth/login/customer`, {
          email: TEST_CUSTOMER.email,
          password: TEST_CUSTOMER.password,
          promotionId: TEST_CUSTOMER.promotionId
        });
        
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!');
        console.log(`üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${loginResponse.data.access.substring(0, 20)}...`);
        
        return { 
          customer: 'existing',
          token: loginResponse.data.access 
        };
        
      } catch (loginError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginError.response?.data?.message || loginError.message);
        console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error.response?.data?.message || error.message);
      
      if (error.response?.data?.message?.includes('promotionId')) {
        console.log('\nüí° –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é (promotion). –ü—Ä–∏–º–µ—Ä:');
        console.log('   POST /api/promotions');
        console.log('   {');
        console.log('     "promotionId": "test-promotion-id",');
        console.log('     "name": "–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ü–∏—è",');
        console.log('     "description": "–ê–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"');
        console.log('   }');
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
createTestCustomer().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  
  if (error.code === 'ECONNREFUSED') {
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000:');
    console.log('   npm run start:dev');
  }
});
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã
function checkSystemFiles() {
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã...\n');

  const requiredFiles = [
    '.env',
    'src/fns/fns-qr.controller.ts',
    'src/fns/fns-qr-parser.service.ts',
    'src/fns/fns-network.service.ts',
    'src/fns/dto/scan-qr.dto.ts',
    'migration_add_network_subdomain.sql',
    'init_test_data.sql',
    'test_qr_simple.js',
    'utils/create_jwt_token.js'
  ];

  const missingFiles = [];
  const existingFiles = [];

  for (const file of requiredFiles) {
    if (fs.existsSync(file)) {
      existingFiles.push(file);
      console.log(`‚úÖ ${file}`);
    } else {
      missingFiles.push(file);
      console.log(`‚ùå ${file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${existingFiles.length}/${requiredFiles.length} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
  
  if (missingFiles.length > 0) {
    console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:');
    missingFiles.forEach(file => console.log(`  - ${file}`));
  }

  return { existingFiles, missingFiles };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function checkConfiguration() {
  console.log('\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');

  try {
    const envContent = fs.readFileSync('.env', 'utf8');
    const requiredEnvVars = [
      'DATABASE_URL',
      'FNS_APP_ID',
      'FNS_AUTH_SERVICE_URL',
      'FNS_ASYNC_SERVICE_URL',
      'JWT_SECRET'
    ];

    const missingVars = [];
    const existingVars = [];

    for (const varName of requiredEnvVars) {
      if (envContent.includes(varName)) {
        existingVars.push(varName);
        console.log(`‚úÖ ${varName}`);
      } else {
        missingVars.push(varName);
        console.log(`‚ùå ${varName} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${existingVars.length}/${requiredEnvVars.length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ`);

    if (missingVars.length > 0) {
      console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      missingVars.forEach(varName => console.log(`  - ${varName}`));
    }

    return { existingVars, missingVars };
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞:', error.message);
    return { existingVars: [], missingVars: requiredEnvVars };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
function checkProjectStructure() {
  console.log('\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...\n');

  const requiredDirs = [
    'src/fns',
    'src/fns/dto',
    'utils',
    'prisma'
  ];

  const missingDirs = [];
  const existingDirs = [];

  for (const dir of requiredDirs) {
    if (fs.existsSync(dir)) {
      existingDirs.push(dir);
      console.log(`‚úÖ ${dir}/`);
    } else {
      missingDirs.push(dir);
      console.log(`‚ùå ${dir}/ - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${existingDirs.length}/${requiredDirs.length} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω–æ`);

  if (missingDirs.length > 0) {
    console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
    missingDirs.forEach(dir => console.log(`  - ${dir}/`));
  }

  return { existingDirs, missingDirs };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
function generateReport() {
  console.log('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã\n');

  const fileCheck = checkSystemFiles();
  const configCheck = checkConfiguration();
  const structureCheck = checkProjectStructure();

  console.log('\nüìä –û–ë–©–ò–ô –û–¢–ß–ï–¢:');
  console.log('=' * 50);

  const totalFiles = fileCheck.existingFiles.length + fileCheck.missingFiles.length;
  const totalVars = configCheck.existingVars.length + configCheck.missingVars.length;
  const totalDirs = structureCheck.existingDirs.length + structureCheck.missingDirs.length;

  console.log(`üìÅ –§–∞–π–ª—ã: ${fileCheck.existingFiles.length}/${totalFiles} (${Math.round(fileCheck.existingFiles.length/totalFiles*100)}%)`);
  console.log(`‚öôÔ∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${configCheck.existingVars.length}/${totalVars} (${Math.round(configCheck.existingVars.length/totalVars*100)}%)`);
  console.log(`üèóÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${structureCheck.existingDirs.length}/${totalDirs} (${Math.round(structureCheck.existingDirs.length/totalDirs*100)}%)`);

  const overallScore = (
    (fileCheck.existingFiles.length / totalFiles) * 0.4 +
    (configCheck.existingVars.length / totalVars) * 0.4 +
    (structureCheck.existingDirs.length / totalDirs) * 0.2
  ) * 100;

  console.log(`\nüéØ –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${Math.round(overallScore)}%`);

  if (overallScore >= 90) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!');
  } else if (overallScore >= 70) {
    console.log('‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞');
  } else {
    console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  }

  return {
    fileCheck,
    configCheck,
    structureCheck,
    overallScore
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function provideRecommendations(report) {
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('=' * 50);

  if (report.fileCheck.missingFiles.length > 0) {
    console.log('\nüìÅ –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:');
    report.fileCheck.missingFiles.forEach(file => {
      console.log(`  - ${file}`);
    });
  }

  if (report.configCheck.missingVars.length > 0) {
    console.log('\n‚öôÔ∏è  –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
    report.configCheck.missingVars.forEach(varName => {
      console.log(`  - ${varName}=–∑–Ω–∞—á–µ–Ω–∏–µ`);
    });
  }

  if (report.structureCheck.missingDirs.length > 0) {
    console.log('\nüèóÔ∏è  –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
    report.structureCheck.missingDirs.forEach(dir => {
      console.log(`  - mkdir -p ${dir}`);
    });
  }

  console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ');
  console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run start:dev');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API endpoints');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function runSystemCheck() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –§–ù–°\n');
  
  const report = generateReport();
  provideRecommendations(report);
  
  return report;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  checkSystemFiles,
  checkConfiguration,
  checkProjectStructure,
  generateReport,
  provideRecommendations,
  runSystemCheck
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runSystemCheck();
}
const crypto = require('crypto');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
function createJWTToken(payload, secret = 'gpW7DtMraBcCf4rXXyMmLZ25cMsrjv6z') {
  const header = {
    alg: 'HS256',
    typ: 'JWT'
  };

  const now = Math.floor(Date.now() / 1000);
  const exp = now + (24 * 60 * 60); // 24 —á–∞—Å–∞

  const finalPayload = {
    ...payload,
    iat: now,
    exp: exp
  };

  // –ö–æ–¥–∏—Ä—É–µ–º header –∏ payload –≤ base64
  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');
  const encodedPayload = Buffer.from(JSON.stringify(finalPayload)).toString('base64url');

  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
  const data = `${encodedHeader}.${encodedPayload}`;
  const signature = crypto.createHmac('sha256', secret).update(data).digest('base64url');

  return `${data}.${signature}`;
}

// –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
function generateTestTokens() {
  console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö JWT —Ç–æ–∫–µ–Ω–æ–≤\n');

  // –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å networkId
  const userWithNetworkToken = createJWTToken({
    id: 1,
    username: 'testuser',
    role: 'CUSTOMER',
    networkId: 1
  });

  console.log('–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å networkId:');
  console.log(userWithNetworkToken);
  console.log('\n');

  // –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ networkId
  const userWithoutNetworkToken = createJWTToken({
    id: 2,
    username: 'testuser2',
    role: 'CUSTOMER'
  });

  console.log('–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ networkId:');
  console.log(userWithoutNetworkToken);
  console.log('\n');

  // –¢–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞
  const adminToken = createJWTToken({
    id: 1,
    username: 'admin',
    role: 'ADMIN'
  });

  console.log('–¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞:');
  console.log(adminToken);
  console.log('\n');

  // –¢–æ–∫–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
  const companyToken = createJWTToken({
    id: 1,
    username: 'r-pharm',
    role: 'COMPANY',
    networkId: 1
  });

  console.log('–¢–æ–∫–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:');
  console.log(companyToken);
  console.log('\n');

  return {
    userWithNetwork: userWithNetworkToken,
    userWithoutNetwork: userWithoutNetworkToken,
    admin: adminToken,
    company: companyToken
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function validateToken(token, secret = 'gpW7DtMraBcCf4rXXyMmLZ25cMsrjv6z') {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) {
      return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞' };
    }

    const [encodedHeader, encodedPayload, signature] = parts;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const data = `${encodedHeader}.${encodedPayload}`;
    const expectedSignature = crypto.createHmac('sha256', secret).update(data).digest('base64url');

    if (signature !== expectedSignature) {
      return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å' };
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
    const payload = JSON.parse(Buffer.from(encodedPayload, 'base64url').toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const now = Math.floor(Date.now() / 1000);
    if (payload.exp && payload.exp < now) {
      return { valid: false, error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' };
    }

    return { valid: true, payload };
  } catch (error) {
    return { valid: false, error: error.message };
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
function testTokens() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤\n');

  const tokens = generateTestTokens();

  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤:\n');

  for (const [name, token] of Object.entries(tokens)) {
    const result = validateToken(token);
    console.log(`${name}:`);
    console.log(`  –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${result.valid ? '‚úÖ' : '‚ùå'}`);
    if (result.valid) {
      console.log(`  Payload: ${JSON.stringify(result.payload, null, 2)}`);
    } else {
      console.log(`  –û—à–∏–±–∫–∞: ${result.error}`);
    }
    console.log('');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  createJWTToken,
  validateToken,
  generateTestTokens,
  testTokens
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testTokens();
}